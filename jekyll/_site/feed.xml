<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DAVID ZHANG</title>
    <description>Focus on apps, programming, electronic devices, photography and lifestyles. 主要专注于App应用,程序开发,电子设备,摄影和生活方式</description>
    <link>https://crispgm.com/</link>
    <atom:link href="https://crispgm.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jul 2016 01:14:24 +0800</pubDate>
    <lastBuildDate>Wed, 06 Jul 2016 01:14:24 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>『翻译』PHP 数组有多大？</title>
        <description>&lt;p&gt;提示：很大！&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;声明&lt;/h1&gt;

&lt;p&gt;本文翻译自 PHP 开发组成员 Nikita Popov(&lt;a href=&quot;https://github.com/nikic&quot;&gt;@nikic&lt;/a&gt;) 的博客，文章根据中文习惯做了一定的调整。&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&quot;https://nikic.github.io/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html&quot;&gt;How big are PHP arrays (and values) really? (Hint: BIG!)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;This article is translated from a blog post of Nikita Popov(&lt;a href=&quot;https://github.com/nikic&quot;&gt;@nikic&lt;/a&gt;),
in which I have done a small amount of adjustment based on the reading habit of Chinese.&lt;/p&gt;

&lt;p&gt;Original Page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://nikic.github.io/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html&quot;&gt;How big are PHP arrays (and values) really? (Hint: BIG!)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;By Nikita Popov, &lt;a href=&quot;https://nikic.github.io&quot;&gt;https://nikic.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;December 12th, 2014&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Translated by Crisp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-1&quot;&gt;正文&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;(2016-06-14)：这篇文章主要关于 PHP 5 的内存使用。PHP 7 的内存占用，对于本文提到的情况，大约得到了3倍的优化。请阅读 &lt;a href=&quot;https://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html&quot;&gt;hashtable implementation in PHP 7&lt;/a&gt; 获得更多信息。&lt;/p&gt;

&lt;p&gt;在一开始，我想感谢&lt;a href=&quot;http://schlueters.de/blog/&quot;&gt;约翰尼斯 Johannes&lt;/a&gt; 和 &lt;a href=&quot;http://www.tyrael.hu/&quot;&gt;泰瑞尔 Tyrael&lt;/a&gt;，他们帮助我寻找到了更多的隐藏内存使用。&lt;/p&gt;

&lt;p&gt;这篇博客，我将使用如下脚本作为样本研究 PHP 数组（及其值）的总体内存占用情况，这个脚本会创建 100000 个唯一的整型数组元素并计算其内存占用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$startMemory = memory_get_usage();
$array = range(1, 100000);
echo memory_get_usage() - $startMemory, &#39; bytes&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你估计它的内存占用会有多大呢？简单的说，一个整型数是 8 bytes（在一个 64 位 UNIX 机器上使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt; 类型），且有 100000 个整型数。
所以显而易见，你需要 800000 bytes。这大概是 0.76 MB。&lt;/p&gt;

&lt;p&gt;现在，我们尝试运行上面的测试代码，结果需要 14649024 bytes。是的，你没听错，是 13.97 MB —— 是估计值的 18 倍。&lt;/p&gt;

&lt;p&gt;所以，额外多出的 18 倍来自于哪？&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;对于那些不想看完整个故事的人，这里给出了一个煎蛋的涉及到的不同组件的内存占用情况：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                             |  64 bit   | 32 bit
---------------------------------------------------
zval                         |  24 bytes | 16 bytes
+ cyclic GC info             |   8 bytes |  4 bytes
+ allocation header          |  16 bytes |  8 bytes
===================================================
zval (value) total           |  48 bytes | 28 bytes
===================================================
bucket                       |  72 bytes | 36 bytes
+ allocation header          |  16 bytes |  8 bytes
+ pointer                    |   8 bytes |  4 bytes
===================================================
bucket (array element) total |  96 bytes | 48 bytes
===================================================
total total                  | 144 bytes | 76 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的数字根据你的操作系统、编译器和编译器参数的不同会有变化。比如：如果你使用 debug 模式编译 PHP 或者开启线程安全，你会得到不同的值。但我认为上述值的大小是你能看到的 64 位生产版本 Linux 下 PHP 5.3 的平均值。&lt;/p&gt;

&lt;p&gt;如果你将它们用 144 bytes 乘以 100000 个元素，会得到 14400000 bytes，也就是 13.73 MB。这很接近实际值，剩下的大多是给未初始化的 buckets 的指针，我将会在后续提到它。&lt;/p&gt;

&lt;p&gt;现在，如果你想对上述数值有更细节的分析，继续读 :)&lt;/p&gt;

&lt;h2 id=&quot;zvaluevalue-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zvalue_value&lt;/code&gt; 联合体&lt;/h2&gt;

&lt;p&gt;首先看一下 PHP 是如何存储数值的。众所周知 PHP 是一个弱类型语言，所以它需要在不通类型中快速切换。
因此 PHP 使用联合体 &lt;code class=&quot;highlighter-rouge&quot;&gt;union&lt;/code&gt; 实现数值存储，它定义在 zend.h 的 307行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef union _zvalue_value {
    long lval;                // For integers and booleans
    double dval;              // For floats (doubles)
    struct {                  // For strings
        char *val;            //     consisting of the string itself
        int len;              //     and its length
    } str;
    HashTable *ht;            // For arrays (hash tables)
    zend_object_value obj;    // For objects
} zvalue_value;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你不懂 C 语言，那也不是一个问题因为这段代码很直接：联合体是一种可以将数值以不同类型存取的方式。
比如说，如果你使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;zvalue_value-&amp;gt;lval&lt;/code&gt;，你将会获得以整型解析的值。如果你使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;zvalue_value-&amp;gt;ht&lt;/code&gt;，值会被解析成一个指向 Hashtable（哈希表）的指针（也就是 php 所谓的数组）。&lt;/p&gt;

&lt;p&gt;但是，我们不需要过于关注这些。最重要的是，一个联合体的大小等于它最大的元素的大小。
这个联合体中，最大的组成部分是 &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 结构（&lt;code class=&quot;highlighter-rouge&quot;&gt;zend_object_value&lt;/code&gt; 结构同 &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 一样，这么为了简单只说后者）。
&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;包含一个指针（8 bytes）和一个整型（4 bytes），总共 12 bytes。
由于内存对齐的原因（12 bytes 不够 cool，因为它不是 64 bits / 8 bytes 的倍数），整个结构的总大小位 16 bytes，因此这是这个联合体的整体大小。&lt;/p&gt;

&lt;p&gt;因此现在我们知道，由于 PHP 动态类型的原因，每个值不是需要 8 bytes，而是 16 bytes。
乘以 100000 后得到 1600000 bytes，即 1.53 MB。
但是，实际值是 13.97 MB，所以我们还是没有得到答案。&lt;/p&gt;

&lt;h2 id=&quot;zval-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zval&lt;/code&gt; 结构&lt;/h2&gt;

&lt;p&gt;这很符合逻辑：联合体只是存值本身，而 PHP 显然还需要存储它的类型以及一些垃圾回收信息。
你可能已经听说过，带有这些信息的结构体叫做 &lt;code class=&quot;highlighter-rouge&quot;&gt;zval&lt;/code&gt;。想获取更多信息，我推荐阅读&lt;a href=&quot;http://blog.golemon.com/2007/01/youre-being-lied-to.html&quot;&gt;萨拉·戈尔蒙（Sara Golemon）的一篇文章&lt;/a&gt;。无论如何，结构体定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct _zval_struct {
    zvalue_value value;     // The value
    zend_uint refcount__gc; // The number of references to this value (for GC)
    zend_uchar type;        // The type
    zend_uchar is_ref__gc;  // Whether this value is a reference (&amp;amp;)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个结构体的大小由它的元素总和决定：&lt;code class=&quot;highlighter-rouge&quot;&gt;zvalue_value&lt;/code&gt; 是 16 bytes，&lt;code class=&quot;highlighter-rouge&quot;&gt;zend_uint&lt;/code&gt; 是 4 bytes，&lt;code class=&quot;highlighter-rouge&quot;&gt;zend_uchars&lt;/code&gt; 每一个 1 bytes。
总共 22 bytes。还是因为内存对齐，实际的大小是 24 bytes。&lt;/p&gt;

&lt;p&gt;如果你存储 100000 个 24 bytes 的元素，总共需要 2400000 bytes，也就是 2.29 MB。
差值在缩小，但真实值仍旧要有 6 倍大。&lt;/p&gt;

&lt;h2 id=&quot;php-53&quot;&gt;垃圾周期回收器（对于 PHP 5.3）&lt;/h2&gt;

&lt;p&gt;PHP 5.3 引入了一种新的&lt;a href=&quot;http://php.net/manual/en/features.gc.collecting-cycles.php&quot;&gt;解决循环引用的垃圾回收器&lt;/a&gt;。为了做这件事，PHP 还需要存更多的数据。
我不想在这里介绍这个算法是如何运转的，你可以阅读上面的链接。
对于我们的大小计算重要的内容是，PHP 会把每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;zval&lt;/code&gt; 包入一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;zval_gc_info&lt;/code&gt; 结构。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct _zval_gc_info {
    zval z;
    union {
        gc_root_buffer       *buffered;
        struct _zval_gc_info *next;
    } u;
} zval_gc_info;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可以看到，Zend 只是加入了一个包涵有两个指针的联合体。正如你记得的，一个联合体的大小等于它的最大元素的大小：
两个元素都是指针，因此都是 8 bytes。所以这个联合体也是 8 bytes。&lt;/p&gt;

&lt;p&gt;如果我们加到前面计算的 24 bytes 上就得到了 32 bytes，乘以 100000 结果是 3.05 MB。&lt;/p&gt;

&lt;h2 id=&quot;zend-mm-allocator&quot;&gt;Zend MM allocator&lt;/h2&gt;

&lt;p&gt;C 不像 PHP，它不会帮你管理内存。你需要自己关注内存的分配情况。
PHP 使用了一个专门为这个需求进行过专门优化的自定义内存管理器：&lt;a href=&quot;http://php.net/manual/en/internals2.memory.php&quot;&gt;Zend Memory Manager&lt;/a&gt;。
Zend MM 基于 &lt;a href=&quot;http://g.oswego.edu/dl/html/malloc.html&quot;&gt;Doug Lea’s malloc&lt;/a&gt; 并且增加了一些 PHP 特定的优化和功能（如内存限制，每个请求后内存清理等）&lt;/p&gt;

&lt;p&gt;对于我们的计算最重要的是，这个“MM”在进行了每次分配后会给添加一个分配头。&lt;a href=&quot;http://lxr.php.net/xref/PHP_5_4/Zend/zend_alloc.c#336&quot;&gt;定义如下&lt;/a&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct _zend_mm_block {
    zend_mm_block_info info;
#if ZEND_DEBUG
    unsigned int magic;
# ifdef ZTS
    THREAD_T thread_id;
# endif
    zend_mm_debug_info debug;
#elif ZEND_MM_HEAP_PROTECTION
    zend_mm_debug_info debug;
#endif
} zend_mm_block;

typedef struct _zend_mm_block_info {
#if ZEND_MM_COOKIES
    size_t _cookie;
#endif
    size_t _size; // size of the allocation
    size_t _prev; // previous block (not sure what exactly this is)
} zend_mm_block_info;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ON WORKING&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 23:45:00 +0800</pubDate>
        <link>https://crispgm.com/page/php-casting-vs-intval.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/php-casting-vs-intval.html</guid>
        
        <category>PHP</category>
        
        <category>PHP5</category>
        
        <category>Internal</category>
        
        
      </item>
    
      <item>
        <title>Olympus Camera Wi-Fi API</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;Since I started my interest on photography, I chose SONY RX100 Mark III initially and now I use a M4/3 interchangeable lens camera, the Olympus E-M5 Mark II.&lt;/p&gt;

&lt;p&gt;Cameras nowadays commonly support Wi-Fi sync with mobile apps. And so does Olympus, which provides an OI Share app to do that.&lt;/p&gt;

&lt;p&gt;And I found some blog articles about the Wi-Fi protocol or commands of Olympus camera. Most of them are not well maintained, because Olympus camera is a minority choice in Internet world.&lt;/p&gt;

&lt;p&gt;Fortunately, I found the &lt;a href=&quot;https://github.com/stv0g/libqt-omd&quot;&gt;stv0g/libqt-omd&lt;/a&gt; project on GitHub. Though the wiki is down, I could read the source code to figure out the APIs by myself.&lt;/p&gt;

&lt;h1 id=&quot;api-specification&quot;&gt;API Specification&lt;/h1&gt;

&lt;p&gt;The API specification is maintained at &lt;a href=&quot;https://github.com/crispgm/olympia/blob/master/api_specs.md&quot;&gt;Olympus Wi-Fi API Specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a useful gist &lt;a href=&quot;https://gist.github.com/mangelajo/6fa005ff3544fecdecfa&quot;&gt;https://gist.github.com/mangelajo/6fa005ff3544fecdecfa&lt;/a&gt; and there is an official protocol document in comment.&lt;/p&gt;

&lt;h1 id=&quot;olympia&quot;&gt;Olympia&lt;/h1&gt;

&lt;p&gt;At last, I came up with an idea that make a web based client for computers built with the APIs, which is named Olympia. Thus, we can transfer and manage photos on our computer.&lt;/p&gt;

&lt;p&gt;Here is a list of features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web based UI&lt;/li&gt;
  &lt;li&gt;Sync photos easily&lt;/li&gt;
  &lt;li&gt;Manage photos both remotely and locally&lt;/li&gt;
  &lt;li&gt;Upload or backup to online cloud storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Project is &lt;a href=&quot;https://github.com/crispgm/olympia&quot;&gt;crispgm/olympia&lt;/a&gt;, written in Ruby.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 May 2016 18:06:22 +0800</pubDate>
        <link>https://crispgm.com/page/olympus-wifi-api.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/olympus-wifi-api.html</guid>
        
        <category>Olympus</category>
        
        <category>Camera</category>
        
        <category>Wi-Fi</category>
        
        <category>API</category>
        
        <category>Photography</category>
        
        
      </item>
    
      <item>
        <title>新的域名</title>
        <description>&lt;p&gt;午饭过后，抱着休闲的想法逛了一下 &lt;a href=&quot;https://www.godaddy.com/&quot;&gt;Godaddy&lt;/a&gt; 和&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;万网&lt;/a&gt;，发现了一些挺有意思的新域名。于是顺手注册了两个。&lt;/p&gt;

&lt;p&gt;以后，本站支持两个域名，均有 https 支持 (Powered by Let’s Encrypt)，请安全访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://crispgm.com&quot;&gt;https://crispgm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crisp.lol&quot;&gt;https://crisp.lol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前，只有一个已知问题：两个域名之间的同一个网页，是不同的 disqus 评论。&lt;/p&gt;

&lt;p&gt;同时，椰椰子主页也有了自己的域名，以及 https 支持：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yeyeko.gift&quot;&gt;https://yeyeko.gift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ps：这的确是一个gift~&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 18:06:22 +0800</pubDate>
        <link>https://crispgm.com/page/new-domain-name.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/new-domain-name.html</guid>
        
        <category>域名</category>
        
        <category>Domain Names</category>
        
        
      </item>
    
      <item>
        <title>关于盗版软件/App</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;今天，2016年5月10日，我从 Apple Mac AppStore 购买了人生中最贵的软件产品——&lt;a href=&quot;http://ulyssesapp.com&quot;&gt;Ulysses&lt;/a&gt;。这是一款重视写作过程，让使用者专注于协作的 Mac App。适用人群是作家、博主、记者和学术人员等。当然，程序员也包含在内，特别是它还支持 Markdown 格式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ulysses is used and loved by authors, bloggers, journalists and academics from all over the world. (from Ulysses official website)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这里，我就不更多介绍 Ulysses 本身了，网上有很多关于它的评测。&lt;/p&gt;

&lt;p&gt;这款 App 我提前下载了 Trial Version 试用了几天，并为它所折服。于是鼠标轻轻一点，购入了人生中最贵的软件产品（¥283）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/ulysses-order.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;知识产权和盗版&lt;/h2&gt;

&lt;p&gt;知识产权长久以来在中国都是一个很不被重视的东西，以至于人民群众把使用盗版当作理所应当，把复制粘贴别人的文章当作“帮忙传播”。&lt;/p&gt;

&lt;p&gt;去年开始我迷上了了豆瓣，关注了一些文艺有趣的人，带来了大量各类有意思有知识短文。但与此同时，除了感受到了文艺人的矫情法，还有就是盗用和抄袭的盛行。如 &lt;a href=&quot;https://www.douban.com/note/551300680/&quot;&gt;Meiya 抄袭事件&lt;/a&gt;。再比如，某破解游戏论坛的网友因为论坛涉及盗版侵权而举报全球最大的在线正版游戏平台 Steam。&lt;/p&gt;

&lt;p&gt;池建强老师在《MacTalk 人生元编程》中讲述了两个关于盗版的故事让我印象很深刻。&lt;/p&gt;

&lt;p&gt;第一个是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（我）曾经在微博上看到一位父亲发的内容：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;“在我儿子帮助下把 iPad 越狱装了个PP助手，看着那么多不要钱的软件想着以前竟然花钱买软件简直是痛不欲生。”&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我的感受：这儿子也够可怜的，从小就不知道偷盗为何物！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二个是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以前有朋友看着我用 Pixelmator 处理图片，问我从哪下载的，我说从 App Store 啊，付费软件。他说啊，你们 Mac 什么都要钱，你看 Windows 上 PhotoShop 都是免费的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或许，买正版软件或 app 会被视为一种情怀，我也或许会有这种心理。但事实上，购买正版软件就像买正牌实体货品一样，是理所应当的，而不是我花了钱亏了。&lt;/p&gt;

&lt;p&gt;使用盗版虽然很可能可以获得正版的体验，但从根本上我认为这是不对的，从某种意义上讲就是偷东西。只不过，使用盗版很容易还不会付出代价。&lt;/p&gt;

&lt;p&gt;并且，在情感上，我也发自内心愿意通过金钱表达自己对作者创造出这么美好的事物的敬佩。我认为这是一种对他们充满感激的积极人生态度。&lt;/p&gt;

&lt;p&gt;最后，我有个观点跟池建强老师的关于盗版和付费的第三点完全一致。作为一个程序员，你都不支持正版，不支持程序员，那还怎么指望别人呢？&lt;/p&gt;

&lt;p&gt;按这个观点，盗版就是程序员的敌人，反对盗版从程序员做起。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;如何避免盗版&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;正版并没有那么贵&lt;/p&gt;

    &lt;p&gt;日常使用的工具类软件，大多售价比较低廉，在200之内，对于任何一个需要的人我认为这不是负担。&lt;/p&gt;

    &lt;p&gt;专业类商业软件非常贵，学生阶段可以免费使用学生版或者购买学生版（根据不同公司的政策不同）。职业阶段，往往公司会提供，如果不幸没有提供可以选择采用下面的其它方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;寻找替代品&lt;/p&gt;

    &lt;p&gt;如果不是学生而且需要使用的软件价格过高，可以寻找替代品，包括更便宜的、免费的和开源的。&lt;/p&gt;

    &lt;p&gt;比如说想用 Photoshop 修图，那我们在 Mac 上可以选择池建强老师推荐的 Pixelmator。&lt;/p&gt;

    &lt;p&gt;对于程序开发相关的，往往会有很多开源的选择，甚至开源的要好于商业软件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;影响身边的人&lt;/p&gt;

    &lt;p&gt;影响自己身边的人，从身边的人开始。慢慢告诉他们正确的观念和接触正版的方式是什么，让更多的人也加入进来。有一个小窍门就是，不断安利一些不太贵但特别有用的 App 让他们“入坑”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;app-&quot;&gt;我购买过的软件/App 列表&lt;/h2&gt;

&lt;p&gt;这里列出一些我购买过的软件或 App 的列表，算是一个小小的推荐。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/ulysses/id623795237?mt=12&quot;&gt;Ulysses for Mac&lt;/a&gt; ¥283&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/dash-3-api-docs-snippets./id449589707?mt=12&quot;&gt;Dash 3&lt;/a&gt; ¥163&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/noizio/id928871589?mt=12&quot;&gt;Noizio for Mac&lt;/a&gt; ¥30&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/reeder-3/id697846300?mt=8&quot;&gt;Reeder 3 for iOS&lt;/a&gt; ¥30&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/enlight/id930026670?mt=8&quot;&gt;Enlight&lt;/a&gt; ¥25&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/wordbook-english-dictionary/id289694924?mt=8&quot;&gt;WordBook&lt;/a&gt; ¥12&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/workflow-powerful-automation/id915249334?mt=8&quot;&gt;Workflow&lt;/a&gt; ¥18&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/manico/id724472954?mt=12&quot;&gt;Manico&lt;/a&gt; ¥25&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:23:00 +0800</pubDate>
        <link>https://crispgm.com/page/piracy-software-or-app.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/piracy-software-or-app.html</guid>
        
        <category>Mac</category>
        
        <category>OSX</category>
        
        <category>DNS</category>
        
        
      </item>
    
      <item>
        <title>Enable HTTPS with Let&#39;s Encrypt</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; has enabled HTTPS as its default protocol, with the power of &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-https&quot;&gt;Why HTTPS?&lt;/h2&gt;

&lt;p&gt;When properly configured, an HTTPS connection guarantees three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confidentiality.&lt;/strong&gt; The visitor’s connection is encrypted, obscuring URLs, cookies, and other sensitive metadata.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Authenticity.&lt;/strong&gt; The visitor is talking to the “real” website, and not to an impersonator or through a “man-in-the-middle”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integrity.&lt;/strong&gt; The data sent between the visitor and the website has not been tampered with or modified.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A plain HTTP connection can be easily monitored, modified, and impersonated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quoted from &lt;a href=&quot;https://https.cio.gov/faq/#what-information-does-https-protect?&quot;&gt;https://https.cio.gov/faq/#what-information-does-https-protect?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;about-lets-encrypt&quot;&gt;About Let’s Encrypt&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; is a free, automated, and open certificate authority (CA), run for the public’s benefit. Let’s Encrypt is a service provided by the Internet Security Research Group (ISRG).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contribute to &lt;a href=&quot;https://github.com/letsencrypt&quot;&gt;letsencrypt&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;about-acme&quot;&gt;About ACME&lt;/h2&gt;

&lt;h3 id=&quot;acme-protocol&quot;&gt;ACME Protocol&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ietf-wg-acme/acme&quot;&gt;https://github.com/ietf-wg-acme/acme&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/letsencrypt/acme-spec&quot;&gt;https://github.com/letsencrypt/acme-spec&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;boulder&quot;&gt;Boulder&lt;/h3&gt;

&lt;p&gt;Boulder is an ACME-based CA, written in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/letsencrypt/boulder&quot;&gt;https://github.com/letsencrypt/boulder&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;practice&quot;&gt;Practice&lt;/h2&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://letsencrypt.readthedocs.org/&quot;&gt;https://letsencrypt.readthedocs.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-certificate&quot;&gt;Get Certificate&lt;/h3&gt;

&lt;p&gt;As the &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-nginx&lt;/code&gt; is not fully developed, I choose &lt;code class=&quot;highlighter-rouge&quot;&gt;certonly&lt;/code&gt; to generate SSL certificate and configure nginx manually.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./letsencrypt-auto certonly --webroot -w /path/to/webroot --email admin@example.com -d example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nginx-configuration&quot;&gt;Nginx Configuration&lt;/h3&gt;

&lt;p&gt;Configure nginx.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_certificate      /etc/letsencrypt/live/crispgm.com/fullchain.pem;
ssl_certificate_key  /etc/letsencrypt/live/crispgm.com/privkey.pem;

ssl_session_timeout  1440m;     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Others are as default.&lt;/p&gt;

&lt;h3 id=&quot;certificate-renewal&quot;&gt;Certificate Renewal&lt;/h3&gt;

&lt;p&gt;Let’s Encrypt CA issues short lived certificates (90 days). Make sure you renew the certificates at least once in 3 months.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Actually, &lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; is a full static site. Almost no difference on performance. :D&lt;/p&gt;

&lt;h2 id=&quot;in-the-end&quot;&gt;In The End&lt;/h2&gt;

&lt;p&gt;Safe journey on &lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; :)&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Dec 2015 23:35:00 +0800</pubDate>
        <link>https://crispgm.com/page/enable-https-with-letsencrypt.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/enable-https-with-letsencrypt.html</guid>
        
        <category>https</category>
        
        <category>letsencrypt</category>
        
        
      </item>
    
      <item>
        <title>Environment Pollution in a Photographer&#39;s View</title>
        <description>&lt;p&gt;On November 14th, it was a haze day with an AQI over 200 and I went to Beijing University of Chemical Technology.
I took some photo in the campus. Thanks to my basic skills of Adobe Photoshop Lightroom and VSCOcam, it looks pretty good now by enhancing the orange and yellow color, removing the arrow on the ground and cropping into a square one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photo/beijing-autumn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as my surprise fade out, I was feeling sad that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can use technology stuffs like RAW, Lightroom and VSCOcam to make the leaves become either green or yellow, and even remove the arrow by the “Spot Removal” tool. However, it is impossible to make a blue sky and breathe the fresh air when taking photos in such a haze day. That’s why environment pollution is a serious problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a photographer’s view of environment pollution.&lt;/p&gt;

&lt;p&gt;And here I ask for the beautiful environment and fresh air.&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2015 15:00:00 +0800</pubDate>
        <link>https://crispgm.com/page/environment-pollution-in-a-photographer-view.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/environment-pollution-in-a-photographer-view.html</guid>
        
        <category>Environmental Protection</category>
        
        <category>Photography</category>
        
        
      </item>
    
      <item>
        <title>『推荐』猫舌怕烫烫——足控福利的冷餐美食剧</title>
        <description>&lt;p&gt;《猫舌怕烫烫》是由恭喜发财工作室2015年制作的和风日系清新治愈系美食剧，由林晶执导，夏决心共同编剧。女主角是个有着猫舌体质的脑洞少女。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;剧集介绍&lt;/h3&gt;

&lt;p&gt;方糖糖是一个有着猫舌体质的大二设计系女生，爱幻想、爱美食，也爱将眼前的事物画下来。她在课余会兼职平面模特，mv演员等，每当结束了拍摄工作，她并不急于回家，而是游荡在杭州的街头巷尾，像一只猫咪嗅着甜品和不同于传统中式烹饪的新形“冷食”。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;剧集链接&lt;/h3&gt;

&lt;p&gt;（共6回）&lt;a href=&quot;http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html&quot;&gt;http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;个人评价&lt;/h3&gt;

&lt;p&gt;虽说三次元听到“阿勒”之类的可能不让人很适应，但这个剧的题材和风格的确很让人很喜欢。女主角很萌，吃东西的时候表情刚刚好体现出食物的美好。剧集本身不太喜欢的是一些搞笑的梗，比如让我纵想丝滑什么的，致敬环节太多了。&lt;/p&gt;

&lt;p&gt;最后，感谢所有制作人和&lt;a href=&quot;http://weibo.com/u/1762833134&quot;&gt;女主&lt;/a&gt;给我们带来这么好看的剧，一些剧照给懂的喜欢的人看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2285703042.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2285703047.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288150825.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288151541.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288151554.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 18:30:00 +0800</pubDate>
        <link>https://crispgm.com/page/cat-tongue-play.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/cat-tongue-play.html</guid>
        
        <category>猫舌</category>
        
        <category>足控</category>
        
        <category>美食</category>
        
        
      </item>
    
      <item>
        <title>创造者和他们的工具——我的利器</title>
        <description>&lt;p&gt;一不小心看到&lt;a href=&quot;http://liqi.io/&quot;&gt;利器&lt;/a&gt;这个分享“工作时所使用的工具，以及使用工具的方式和原则”的网站。
由于自我感觉算不上“优秀的创造者”，顾按照利器的格式写一篇在自己博客上和大家分享。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;介绍一下你自己和所做的工作。&lt;/h3&gt;

&lt;p&gt;我是 Crisp，名字叫 David Zhang，目前在做 Web 开发相关的工作。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;你都在使用哪些硬件？&lt;/h3&gt;

&lt;p&gt;工作开发目前在 &lt;a href=&quot;http://www.apple.com/macbook-pro/&quot;&gt;MacBook Pro&lt;/a&gt; 上进行，外接 &lt;a href=&quot;http://www.lg.com/us/commercial/lcd-computer-monitors/lg-IPS224T-PN&quot;&gt;LG IPS224T&lt;/a&gt; 显示器和 &lt;a href=&quot;http://cherrycorp.com/product/g80-3850-mx-brown-3-0-keyboard/&quot;&gt;Cherry MX 茶轴&lt;/a&gt; 机械键盘。在家主要用 &lt;a href=&quot;http://www.apple.com/macbook-air/&quot;&gt;MacBook Air&lt;/a&gt;，并在纠结要不要买一台台式机玩游戏。&lt;/p&gt;

&lt;p&gt;数据会备份到 &lt;a href=&quot;http://www.wdc.com/cn/products/products.aspx?id=1000&quot;&gt;WD My Passport Ultra&lt;/a&gt;，国外的云存储安全但速度不行，国内的反之。只好将不重要的数据备份在云端，重要的用起了物理备份。&lt;/p&gt;

&lt;p&gt;日常来说手机用 &lt;a href=&quot;http://www.apple.com/iphone-se&quot;&gt;iPhone SE&lt;/a&gt;，从 iPhone 6 转过来，实在喜欢手能轻松握住（我手不小）且揣兜里不会折弯的小手机。阅读会选择 Kindle，最早是 &lt;a href=&quot;http://www.amazon.com/Kindle-Paperwhite-Touch-light/dp/B007OZNZG0&quot;&gt;Kindle Paperwhite&lt;/a&gt;，方便且便宜，之后第一时间升级到了 &lt;a href=&quot;https://www.amazon.cn/dp/B010EJPW7C/ref=sr_1_1?ie=UTF8&amp;amp;qid=1462245425&quot;&gt;Kindle Oasis&lt;/a&gt;，实体翻页按键实在对我很有吸引力。对于技术/工具书还是会选择实体版的，不为收藏，只为便于翻找。工作时用 &lt;a href=&quot;http://en-us.sennheiser.com/over-ear-headphones-hd-202&quot;&gt;Sennhaiser HD202II&lt;/a&gt; 听音乐，家里放着一台 &lt;a href=&quot;http://www.bose.cn/product.aspx?cid=632&quot;&gt;BOSE Wave Music System III&lt;/a&gt;，支持AUX IN连接电脑，偶尔也可以听收音机和CD。&lt;/p&gt;

&lt;p&gt;摄影用 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/em5mk2/index.html&quot;&gt;Olympus E-M5 Mark II&lt;/a&gt;，人像 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/mlens/45_18/index.html&quot;&gt;45mm F1.8&lt;/a&gt;，室内或人文 &lt;a href=&quot;http://consumer.panasonic.cn/product/cameras-camcorders/lumix-g-lens/fixed-focal/h-x015gk.html&quot;&gt;DG15&lt;/a&gt;，广角 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/mlens/9-18_40-56/index.html&quot;&gt;9-18mm&lt;/a&gt;。镜头都是简称，全称请看链接吧。&lt;/p&gt;

&lt;p&gt;除去电子设备，我有两只钢笔和一只铅笔。钢笔分别是 &lt;a href=&quot;http://www.lamy.com/eng/b2c/safari&quot;&gt;LAMY Safari&lt;/a&gt; 和 &lt;a href=&quot;http://www.amazon.cn/Pilot-%E7%99%BE%E4%B9%90-FP-78G-M-B-22K%E5%8C%85%E9%87%91%E7%AC%94%E5%B0%96%E9%92%A2%E7%AC%94-M%E5%92%80/dp/B003H06HN4&quot;&gt;Pilot 78G&lt;/a&gt;，前者出水猛、更亮骚，后者更朴实好用。铅笔是 &lt;a href=&quot;https://item.taobao.com/item.htm?id=522070211448&quot;&gt;Zebra Tect 0.5&lt;/a&gt;。此外，还有一些 Muji 的圆珠笔和小本子。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;软件呢？&lt;/h3&gt;

&lt;p&gt;开发最常用的是买了 License 的 &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 2&lt;/a&gt; 和定制过 &lt;a href=&quot;http://www.vim.org/&quot;&gt;VIM&lt;/a&gt;。浏览器用 &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;。聊天主要还是 QQ/微信，都是被圈子绑架的，Office 之类也同理。其实我特别喜欢 &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; 的概念，但限于团队和网络的问题，只好搞了个 &lt;a href=&quot;https://bearychat.com/&quot;&gt;BearyChat&lt;/a&gt; 和少量熟人自娱自乐。&lt;/p&gt;

&lt;p&gt;生产力工具方面，会使用 Apple Notes, &lt;a href=&quot;https://www.onenote.com/&quot;&gt;OneNote&lt;/a&gt; 作为笔记，&lt;a href=&quot;http://ulyssesapp.com/&quot;&gt;Ulysses&lt;/a&gt;写 Markdown，&lt;a href=&quot;http://pan.baidu.com/&quot;&gt;百度云&lt;/a&gt;作文件共享，&lt;a href=&quot;https://www.wunderlist.com/&quot;&gt;Wunderlist&lt;/a&gt; 作为个人 GTD 管理，工作内容 GTD 用&lt;a href=&quot;https://item.taobao.com/item.htm?spm=2013.1.0.0.xh6pv4&amp;amp;id=45159521615&quot;&gt;败家实验室&lt;/a&gt;不洇墨笔记本。&lt;/p&gt;

&lt;p&gt;日常使用 &lt;a href=&quot;http://reederapp.com/&quot;&gt;Reeder&lt;/a&gt; + &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; 看新闻，不喜欢专门的新闻app。听歌会用 &lt;a href=&quot;https://www.foobar2000.org/&quot;&gt;foobar2000&lt;/a&gt; 和&lt;a href=&quot;http://music.163.com/&quot;&gt;网易云音乐&lt;/a&gt;。除此之外，我喜欢用 &lt;a href=&quot;https://itunes.apple.com/us/app/wordbook-english-dictionary/id289694924?mt=8&quot;&gt;WordBook&lt;/a&gt; 英英词典。&lt;/p&gt;

&lt;p&gt;处理 RAW 图片会用 &lt;a href=&quot;https://lightroom.adobe.com/&quot;&gt;Adobe Lightroom&lt;/a&gt;，而在手机上会混用 &lt;a href=&quot;https://vsco.co/vscocam&quot;&gt;VSCOcam&lt;/a&gt;、&lt;a href=&quot;https://itunes.apple.com/us/app/snapseed/id439438619?mt=8&quot;&gt;Snapseed&lt;/a&gt; 和 &lt;a href=&quot;http://www.enlightapp.com/&quot;&gt;Enlight&lt;/a&gt;，并分享到 &lt;a href=&quot;https://www.instagram.com/&quot;&gt;Instagram&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Finally，必须说一句，&lt;a href=&quot;https://www.linode.com/&quot;&gt;Linode&lt;/a&gt; + &lt;a href=&quot;https://shadowsocks.org&quot;&gt;Shadowsocks&lt;/a&gt; 搭建一套翻墙系统很有必要，这是通往世界之门的钥匙。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;你最理想的工作环境是什么？&lt;/h3&gt;

&lt;p&gt;优雅干净凉快（空调要冷！）的房间，敞亮但有一定的隐私空间。有干净漂亮的休息区，特别是舒服的沙发。窗子外可以看到自然景色，走不多远能找到有情调的咖啡店。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;你平时获得工作灵感的方式有哪些？&lt;/h3&gt;

&lt;p&gt;在本子上写写涂涂画画，浏览 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 和 &lt;a href=&quot;https://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt;。当然，最有灵感的时候其实是坐地铁。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;推荐一件生活利器给大家。&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.cn/%E4%B8%AA%E6%8A%A4%E5%81%A5%E5%BA%B7/dp/B00HCYFCOQ&quot;&gt;Kleenex 湿厕纸&lt;/a&gt;。原因：擦得就是比普通纸干净。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 22:11:00 +0800</pubDate>
        <link>https://crispgm.com/page/my-tools.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/my-tools.html</guid>
        
        <category>Apps</category>
        
        <category>Tools</category>
        
        <category>利器</category>
        
        
      </item>
    
      <item>
        <title>『推荐』有趣的终端 Terminal 工具</title>
        <description>&lt;h2 id=&quot;doubanfm&quot;&gt;Douban.fm&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Node.js 编写的控制台版的豆瓣fm，Mac 上亲测可用，但不太稳定&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; &lt;a href=&quot;https://github.com/turingou/douban.fm&quot;&gt;https://github.com/turingou/douban.fm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ca0a75a041cb65d1ad9dddc2e44b1c52903db7d0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36316666306465337477316563696a3364713830626a32306d3430657a3735752e6a7067&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gotty&quot;&gt;Gotty&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Go 编写的终端“直播”工具，参见：GoTTY - 将你的 terminal 输出到网页上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; &lt;a href=&quot;https://github.com/yudai/gotty&quot;&gt;https://github.com/yudai/gotty&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yudai/gotty/master/screenshot.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wego&quot;&gt;Wego&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Go 编写的天气预报工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; https://github.com/schachmat/wego&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c3d2b92671f1ded5d5a9a9ebafdc836527f97269/687474703a2f2f7363686163686d61742e6769746875622e696f2f7765676f2f7765676f2e676966&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;qrcode-terminal&quot;&gt;Qrcode-terminal&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Node.js 编写的在终端显示二维码工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; https://github.com/gtanner/qrcode-terminal&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1b87ab92f230c35ff19abf2449e0fd52bea3f124/68747470733a2f2f7261772e6769746875622e636f6d2f6774616e6e65722f7172636f64652d7465726d696e616c2f6d61737465722f6578616d706c652f62617369632e706e67&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 21:09:00 +0800</pubDate>
        <link>https://crispgm.com/page/funny-terminal-tools.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/funny-terminal-tools.html</guid>
        
        <category>Terminal</category>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>Apple iOS m3u8 媒体文件下载</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;由于 Apple iOS 不支持 Adobe Flash 技术，所以在 iOS 上要使用 m3u8 进行多媒体和流媒体等的播放。如：微博视频。&lt;/p&gt;

&lt;p&gt;对于好看的视频，有时候希望能够下载下来，具体方法请看本文介绍。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;m3u8 是 Apple iOS 流媒体使用的一种格式，它本质上是个文本的播放列表，实际的媒体文件是 MPEG2-TS 或者 AAC(Audio Only)。具体可以参考 Wikipedia 的英文介绍：&lt;a href=&quot;https://en.wikipedia.org/wiki/M3U&quot;&gt;https://en.wikipedia.org/wiki/M3U&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;获取 URL&lt;/h3&gt;

&lt;p&gt;首先要拿到 URL，方法是在 Chrome 上用 iPhone6 的 User-Agent 打开，然后在 Chrome 中找到，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/video-url.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://us.sinaimg.cn/000MLkkJjx06TSSGESJF050d010000oz0k01.m3u8?KID=unistore,video&amp;amp;Expires=1437309945&amp;amp;ssig=kh06r9cH7F&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ts-&quot;&gt;获取 ts 文件&lt;/h3&gt;

&lt;p&gt;紧接着下载下来这个文件，用编辑器打开，就会看到里面的内容，是一堆 ts 格式的文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/m3u8-file-content.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;下载源文件&lt;/h3&gt;

&lt;p&gt;把这些 ts 文件名跟 http://us.sinaimg.cn/ 拼在一起下载下来，就是被切成分片的视频源文件了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/ts-file.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;文件合并&lt;/h3&gt;

&lt;p&gt;最后，就是把这一堆文件合并在一起&lt;/p&gt;

&lt;p&gt;有两种方法，一种比较粗暴，就是强型把文件的内容合并到一个文件中。&lt;/p&gt;

&lt;p&gt;如：源文件是 1.ts 和 2.ts&lt;/p&gt;

&lt;p&gt;那么就：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat 2.ts &amp;gt;&amp;gt; 1.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样，视频完全可以看，只不过因为 meta 信息还是 1.ts 的，会导致视频进度条显示不正确。&lt;/p&gt;

&lt;p&gt;如果想优雅的合并，就需要专门的合并工具，强大开源工具 ffmpeg 是可以的。安装方法就不多讲了，同学们可以自己编译一个。对于 Mac 用户来说，可以去 &lt;a href=&quot;http://ffmpegmac.net/&quot;&gt;ffmpegmac&lt;/a&gt;直接下载编译好的二进制版本。&lt;/p&gt;

&lt;p&gt;安装好 ffmpeg 后，执行下面的命令就可以完成合并：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i &quot;concat:1.ts|2.ts&quot; -c copy output.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，ffmpeg 功能还很强大，比如保存成其它格式什么的。有兴趣可以深入探索下。&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Jul 2015 13:43:00 +0800</pubDate>
        <link>https://crispgm.com/page/downloading-m3u8-video.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/downloading-m3u8-video.html</guid>
        
        <category>Apple</category>
        
        <category>iOS</category>
        
        <category>ts</category>
        
        <category>m3u8</category>
        
        <category>ffmpeg</category>
        
        
      </item>
    
  </channel>
</rss>
