<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DAVID ZHANG</title>
    <description>Focus on apps, programming, electronic devices, photography and lifestyles. 主要专注于App应用,程序开发,电子设备,摄影和生活方式</description>
    <link>https://crispgm.com/</link>
    <atom:link href="https://crispgm.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Jun 2016 00:25:31 +0800</pubDate>
    <lastBuildDate>Thu, 02 Jun 2016 00:25:31 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Olympus Camera Wi-Fi API</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;Since I started my interest on photography, I chose SONY RX100 Mark III initially and now I use a M4/3 interchangeable lens camera, the Olympus E-M5 Mark II.&lt;/p&gt;

&lt;p&gt;Cameras nowadays commonly support Wi-Fi sync with mobile apps. And so does Olympus, which provides an OI Share app to do that.&lt;/p&gt;

&lt;p&gt;And I found some blog articles about the Wi-Fi protocol or commands of Olympus camera. Most of them are not well maintained, because Olympus camera is a minority choice in Internet world.&lt;/p&gt;

&lt;p&gt;Fortunately, I found the &lt;a href=&quot;https://github.com/stv0g/libqt-omd&quot;&gt;stv0g/libqt-omd&lt;/a&gt; project on GitHub. Though the wiki is down, I could read the source code to figure out the APIs by myself.&lt;/p&gt;

&lt;h1 id=&quot;api-specification&quot;&gt;API Specification&lt;/h1&gt;

&lt;p&gt;The API specification is maintained at &lt;a href=&quot;https://github.com/crispgm/olympia/blob/master/api_specs.md&quot;&gt;Olympus Wi-Fi API Specification&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;olympia&quot;&gt;Olympia&lt;/h1&gt;

&lt;p&gt;At last, I came up with an idea that make a web based client for computers built with the APIs, which is named Olympia. Thus, we can transfer and manage photos on our computer.&lt;/p&gt;

&lt;p&gt;Here is a list of features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web based UI&lt;/li&gt;
  &lt;li&gt;Sync photos easily&lt;/li&gt;
  &lt;li&gt;Manage photos both remotely and locally&lt;/li&gt;
  &lt;li&gt;Upload or backup to online cloud storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Project is &lt;a href=&quot;https://github.com/crispgm/olympia&quot;&gt;crispgm/olympia&lt;/a&gt;, written in Ruby.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 18:06:22 +0800</pubDate>
        <link>https://crispgm.com/page/olympus-wifi-api.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/olympus-wifi-api.html</guid>
        
        <category>Olympus</category>
        
        <category>Camera</category>
        
        <category>Wi-Fi</category>
        
        <category>API</category>
        
        <category>Photography</category>
        
        
      </item>
    
      <item>
        <title>新的域名</title>
        <description>&lt;p&gt;午饭过后，抱着休闲的想法逛了一下 &lt;a href=&quot;https://www.godaddy.com/&quot;&gt;Godaddy&lt;/a&gt; 和&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;万网&lt;/a&gt;，发现了一些挺有意思的新域名。于是顺手注册了两个。&lt;/p&gt;

&lt;p&gt;以后，本站支持两个域名，均有 https 支持 (Powered by Let’s Encrypt)，请安全访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://crispgm.com&quot;&gt;https://crispgm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crisp.lol&quot;&gt;https://crisp.lol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前，只有一个已知问题：两个域名之间的同一个网页，是不同的 disqus 评论。&lt;/p&gt;

&lt;p&gt;同时，椰椰子主页也有了自己的域名：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yeyeko.gift&quot;&gt;http://yeyeko.gift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ps：这的确是一个gift~&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 18:06:22 +0800</pubDate>
        <link>https://crispgm.com/page/new-domain-name.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/new-domain-name.html</guid>
        
        <category>域名</category>
        
        <category>Domain Names</category>
        
        
      </item>
    
      <item>
        <title>关于盗版软件/App</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;今天，2016年5月10日，我从 Apple Mac AppStore 购买了人生中最贵的软件产品——&lt;a href=&quot;http://ulyssesapp.com&quot;&gt;Ulysses&lt;/a&gt;。这是一款重视写作过程，让使用者专注于协作的 Mac App。适用人群是作家、博主、记者和学术人员等。当然，程序员也包含在内，特别是它还支持 Markdown 格式。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ulysses is used and loved by authors, bloggers, journalists and academics from all over the world. (from Ulysses official website)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这里，我就不更多介绍 Ulysses 本身了，网上有很多关于它的评测。&lt;/p&gt;

&lt;p&gt;这款 App 我提前下载了 Trial Version 试用了几天，并为它所折服。于是鼠标轻轻一点，购入了人生中最贵的软件产品（¥283）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/ulysses-order.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;知识产权和盗版&lt;/h2&gt;

&lt;p&gt;知识产权长久以来在中国都是一个很不被重视的东西，以至于人民群众把使用盗版当作理所应当，把复制粘贴别人的文章当作“帮忙传播”。&lt;/p&gt;

&lt;p&gt;去年开始我迷上了了豆瓣，关注了一些文艺有趣的人，带来了大量各类有意思有知识短文。但与此同时，除了感受到了文艺人的矫情法，还有就是盗用和抄袭的盛行。如 &lt;a href=&quot;https://www.douban.com/note/551300680/&quot;&gt;Meiya 抄袭事件&lt;/a&gt;。再比如，某破解游戏论坛的网友因为论坛涉及盗版侵权而举报全球最大的在线正版游戏平台 Steam。&lt;/p&gt;

&lt;p&gt;池建强老师在《MacTalk 人生元编程》中讲述了两个关于盗版的故事让我印象很深刻。&lt;/p&gt;

&lt;p&gt;第一个是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（我）曾经在微博上看到一位父亲发的内容：
&amp;gt; 在我儿子帮助下把 iPad 越狱装了个PP助手，看着那么多不要钱的软件想着以前竟然花钱买软件简直是痛不欲生。
我的感受：这儿子也够可怜的，从小就不知道偷盗为何物！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二个是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以前有朋友看着我用 Pixelmator 处理图片，问我从哪下载的，我说从 App Store 啊，付费软件。他说啊，你们 Mac 什么都要钱，你看 Windows 上 PhotoShop 都是免费的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;或许，买正版软件或 app 会被视为一种情怀，我也或许会有这种心理。但事实上，购买正版软件就像买正牌实体货品一样，是理所应当的，而不是我花了钱亏了。&lt;/p&gt;

&lt;p&gt;使用盗版虽然很可能可以获得正版的体验，但从根本上我认为这是不对的，从某种意义上讲就是偷东西。只不过，使用盗版很容易还不会付出代价。&lt;/p&gt;

&lt;p&gt;并且，在情感上，我也发自内心愿意通过金钱表达自己对作者创造出这么美好的事物的敬佩。我认为这是一种对他们充满感激的积极人生态度。&lt;/p&gt;

&lt;p&gt;最后，我有个观点跟池建强老师的关于盗版和付费的第三点完全一致。作为一个程序员，你都不支持正版，不支持程序员，那还怎么指望别人呢？&lt;/p&gt;

&lt;p&gt;按这个观点，盗版就是程序员的敌人，反对盗版从程序员做起。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;如何避免盗版&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;正版并没有那么贵&lt;/p&gt;

    &lt;p&gt;日常使用的工具类软件，大多售价比较低廉，在200之内，对于任何一个需要的人我认为这不是负担。&lt;/p&gt;

    &lt;p&gt;专业类商业软件非常贵，学生阶段可以免费使用学生版或者购买学生版（根据不同公司的政策不同）。职业阶段，往往公司会提供，如果不幸没有提供那就采用下面的其它方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;寻找替代品&lt;/p&gt;

    &lt;p&gt;如果不是学生而且需要使用的软件价格过高，可以寻找替代品，包括更便宜的、免费的和开源的。&lt;/p&gt;

    &lt;p&gt;比如说想用 Photoshop 修图，那我们在 Mac 上可以选择池建强老师推荐的 Pixelmator。&lt;/p&gt;

    &lt;p&gt;对于程序开发相关的，往往会有很多开源的选择，甚至开源的要好于商业软件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;影响身边的人&lt;/p&gt;

    &lt;p&gt;影响自己身边的人，从身边的人开始。慢慢告诉他们正确的观念和接触正版的方式是什么，让更多的人也加入进来。有一个小窍门就是，不断安利一些不太贵但特别有用的 App 让他们“入坑”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;app-&quot;&gt;我购买过的软件/App 列表&lt;/h2&gt;

&lt;p&gt;这里列出一些我购买过的软件或 App 的列表，算是一个小小的推荐。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/ulysses/id623795237?mt=12&quot;&gt;Ulysses for Mac&lt;/a&gt; ¥283&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/noizio/id928871589?mt=12&quot;&gt;Noizio for Mac&lt;/a&gt; ¥30&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/reeder-3/id697846300?mt=8&quot;&gt;Reeder 3 for iOS&lt;/a&gt; ¥30&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/enlight/id930026670?mt=8&quot;&gt;Enlight&lt;/a&gt; ¥25&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/wordbook-english-dictionary/id289694924?mt=8&quot;&gt;WordBook&lt;/a&gt; ¥12&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/workflow-powerful-automation/id915249334?mt=8&quot;&gt;Workflow&lt;/a&gt; ¥18&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/manico/id724472954?mt=12&quot;&gt;Manico&lt;/a&gt; ¥25&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:23:00 +0800</pubDate>
        <link>https://crispgm.com/page/piracy-software-or-app.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/piracy-software-or-app.html</guid>
        
        <category>Mac</category>
        
        <category>OSX</category>
        
        <category>DNS</category>
        
        
      </item>
    
      <item>
        <title>Enable HTTPS with Let&#39;s Encrypt</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; has enabled HTTPS as its default protocol, with the power of &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-https&quot;&gt;Why HTTPS?&lt;/h2&gt;

&lt;p&gt;When properly configured, an HTTPS connection guarantees three things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Confidentiality.&lt;/strong&gt; The visitor’s connection is encrypted, obscuring URLs, cookies, and other sensitive metadata.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Authenticity.&lt;/strong&gt; The visitor is talking to the “real” website, and not to an impersonator or through a “man-in-the-middle”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integrity.&lt;/strong&gt; The data sent between the visitor and the website has not been tampered with or modified.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A plain HTTP connection can be easily monitored, modified, and impersonated.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quoted from &lt;a href=&quot;https://https.cio.gov/faq/#what-information-does-https-protect?&quot;&gt;https://https.cio.gov/faq/#what-information-does-https-protect?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;about-lets-encrypt&quot;&gt;About Let’s Encrypt&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; is a free, automated, and open certificate authority (CA), run for the public’s benefit. Let’s Encrypt is a service provided by the Internet Security Research Group (ISRG).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contribute to &lt;a href=&quot;https://github.com/letsencrypt&quot;&gt;letsencrypt&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;about-acme&quot;&gt;About ACME&lt;/h2&gt;

&lt;h3 id=&quot;acme-protocol&quot;&gt;ACME Protocol&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ietf-wg-acme/acme&quot;&gt;https://github.com/ietf-wg-acme/acme&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/letsencrypt/acme-spec&quot;&gt;https://github.com/letsencrypt/acme-spec&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;boulder&quot;&gt;Boulder&lt;/h3&gt;

&lt;p&gt;Boulder is an ACME-based CA, written in Go.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/letsencrypt/boulder&quot;&gt;https://github.com/letsencrypt/boulder&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;practice&quot;&gt;Practice&lt;/h2&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://letsencrypt.readthedocs.org/&quot;&gt;https://letsencrypt.readthedocs.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-certificate&quot;&gt;Get Certificate&lt;/h3&gt;

&lt;p&gt;As the &lt;code class=&quot;highlighter-rouge&quot;&gt;letsencrypt-nginx&lt;/code&gt; is not fully developed, I choose &lt;code class=&quot;highlighter-rouge&quot;&gt;certonly&lt;/code&gt; to generate SSL certificate and configure nginx manually.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./letsencrypt-auto certonly --webroot -w /path/to/webroot --email admin@example.com -d example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nginx-configuration&quot;&gt;Nginx Configuration&lt;/h3&gt;

&lt;p&gt;Configure nginx.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssl_certificate      /etc/letsencrypt/live/crispgm.com/fullchain.pem;
ssl_certificate_key  /etc/letsencrypt/live/crispgm.com/privkey.pem;

ssl_session_timeout  1440m;     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Others are as default.&lt;/p&gt;

&lt;h3 id=&quot;certificate-renewal&quot;&gt;Certificate Renewal&lt;/h3&gt;

&lt;p&gt;Let’s Encrypt CA issues short lived certificates (90 days). Make sure you renew the certificates at least once in 3 months.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Actually, &lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; is a full static site. Almost no difference on performance. :D&lt;/p&gt;

&lt;h2 id=&quot;in-the-end&quot;&gt;In The End&lt;/h2&gt;

&lt;p&gt;Safe journey on &lt;a href=&quot;https://crispgm.com&quot;&gt;crispgm.com&lt;/a&gt; :)&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Dec 2015 23:35:00 +0800</pubDate>
        <link>https://crispgm.com/page/enable-https-with-letsencrypt.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/enable-https-with-letsencrypt.html</guid>
        
        <category>https</category>
        
        <category>letsencrypt</category>
        
        
      </item>
    
      <item>
        <title>Environment Pollution in a Photographer&#39;s View</title>
        <description>&lt;p&gt;On November 14th, it was a haze day with an AQI over 200 and I went to Beijing University of Chemical Technology.
I took some photo in the campus. Thanks to my basic skills of Adobe Photoshop Lightroom and VSCOcam, it looks pretty good now by enhancing the orange and yellow color, removing the arrow on the ground and cropping into a square one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/photo/beijing-autumn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as my surprise fade out, I was feeling sad that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can use technology stuffs like RAW, Lightroom and VSCOcam to make the leaves become either green or yellow, and even remove the arrow by the “Spot Removal” tool. However, it is impossible to make a blue sky and breathe the fresh air when taking photos in such a haze day. That’s why environment pollution is a serious problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s a photographer’s view of environment pollution.&lt;/p&gt;

&lt;p&gt;And here I ask for the beautiful environment and fresh air.&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2015 15:00:00 +0800</pubDate>
        <link>https://crispgm.com/page/environment-pollution-in-a-photographer-view.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/environment-pollution-in-a-photographer-view.html</guid>
        
        <category>Environmental Protection</category>
        
        <category>Photography</category>
        
        
      </item>
    
      <item>
        <title>『推荐』猫舌怕烫烫——足控福利的冷餐美食剧</title>
        <description>&lt;p&gt;《猫舌怕烫烫》是由恭喜发财工作室2015年制作的和风日系清新治愈系美食剧，由林晶执导，夏决心共同编剧。女主角是个有着猫舌体质的脑洞少女。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;剧集介绍&lt;/h3&gt;

&lt;p&gt;方糖糖是一个有着猫舌体质的大二设计系女生，爱幻想、爱美食，也爱将眼前的事物画下来。她在课余会兼职平面模特，mv演员等，每当结束了拍摄工作，她并不急于回家，而是游荡在杭州的街头巷尾，像一只猫咪嗅着甜品和不同于传统中式烹饪的新形“冷食”。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;剧集链接&lt;/h3&gt;

&lt;p&gt;（共6回）&lt;a href=&quot;http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html&quot;&gt;http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;个人评价&lt;/h3&gt;

&lt;p&gt;虽说三次元听到“阿勒”之类的可能不让人很适应，但这个剧的题材和风格的确很让人很喜欢。女主角很萌，吃东西的时候表情刚刚好体现出食物的美好。剧集本身不太喜欢的是一些搞笑的梗，比如让我纵想丝滑什么的，致敬环节太多了。&lt;/p&gt;

&lt;p&gt;最后，感谢所有制作人和&lt;a href=&quot;http://weibo.com/u/1762833134&quot;&gt;女主&lt;/a&gt;给我们带来这么好看的剧，一些剧照给懂的喜欢的人看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2285703042.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2285703047.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288150825.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288151541.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/p2288151554.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Nov 2015 18:30:00 +0800</pubDate>
        <link>https://crispgm.com/page/cat-tongue-play.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/cat-tongue-play.html</guid>
        
        <category>猫舌</category>
        
        <category>足控</category>
        
        <category>美食</category>
        
        
      </item>
    
      <item>
        <title>创造者和他们的工具——我的利器</title>
        <description>&lt;p&gt;一不小心看到&lt;a href=&quot;http://liqi.io/&quot;&gt;利器&lt;/a&gt;这个分享“工作时所使用的工具，以及使用工具的方式和原则”的网站。
由于自我感觉算不上“优秀的创造者”，顾按照利器的格式写一篇在自己博客上和大家分享。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;介绍一下你自己和所做的工作。&lt;/h3&gt;

&lt;p&gt;我是 Crisp，名字叫 David Zhang，目前在做 Web 开发相关的工作。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;你都在使用哪些硬件？&lt;/h3&gt;

&lt;p&gt;工作开发目前在 &lt;a href=&quot;http://www.apple.com/macbook-pro/&quot;&gt;MacBook Pro&lt;/a&gt; 上进行，外接 &lt;a href=&quot;http://www.lg.com/us/commercial/lcd-computer-monitors/lg-IPS224T-PN&quot;&gt;LG IPS224T&lt;/a&gt; 显示器和 &lt;a href=&quot;http://cherrycorp.com/product/g80-3850-mx-brown-3-0-keyboard/&quot;&gt;Cherry MX 茶轴&lt;/a&gt; 机械键盘。在家主要用 &lt;a href=&quot;http://www.apple.com/macbook-air/&quot;&gt;MacBook Air&lt;/a&gt;，并在纠结要不要买一台台式机玩游戏。&lt;/p&gt;

&lt;p&gt;数据会备份到 &lt;a href=&quot;http://www.wdc.com/cn/products/products.aspx?id=1000&quot;&gt;WD My Passport Ultra&lt;/a&gt;，国外的云存储安全但速度不行，国内的反之。只好将不重要的数据备份在云端，重要的用起了物理备份。&lt;/p&gt;

&lt;p&gt;日常来说手机用 &lt;a href=&quot;http://www.apple.com/shop/buy-iphone/iphone6&quot;&gt;iPhone 6&lt;/a&gt;，阅读会选择 Kindle。最早是 &lt;a href=&quot;http://www.amazon.com/Kindle-Paperwhite-Touch-light/dp/B007OZNZG0&quot;&gt;Kindle Paperwhite&lt;/a&gt;，方便且便宜，之后第一时间升级到了 &lt;a href=&quot;https://www.amazon.cn/dp/B010EJPW7C/ref=sr_1_1?ie=UTF8&amp;amp;qid=1462245425&quot;&gt;Kindle Oasis&lt;/a&gt;，实体翻页按键实在对我很有吸引力。对于技术/工具书还是会选择实体版的，不为收藏，只为便于翻找。工作时用 &lt;a href=&quot;http://en-us.sennheiser.com/over-ear-headphones-hd-202&quot;&gt;Sennhaiser HD202II&lt;/a&gt; 听音乐，家里放着一台 &lt;a href=&quot;http://www.bose.cn/product.aspx?cid=632&quot;&gt;BOSE Wave Music System III&lt;/a&gt;，支持AUX IN连接电脑，偶尔也可以听收音机和CD。&lt;/p&gt;

&lt;p&gt;摄影用 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/em5mk2/index.html&quot;&gt;Olympus E-M5 Mark II&lt;/a&gt;，人像 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/mlens/45_18/index.html&quot;&gt;45mm F1.8&lt;/a&gt;，室内或人文 &lt;a href=&quot;http://consumer.panasonic.cn/product/cameras-camcorders/lumix-g-lens/fixed-focal/h-x015gk.html&quot;&gt;DG15&lt;/a&gt;，广角 &lt;a href=&quot;http://olympus-imaging.cn/product/dslr/mlens/9-18_40-56/index.html&quot;&gt;9-18mm&lt;/a&gt;。镜头都是简称，全称请看链接吧。&lt;/p&gt;

&lt;p&gt;除去电子设备，我有两只钢笔和一只铅笔。钢笔分别是 &lt;a href=&quot;http://www.lamy.com/eng/b2c/safari&quot;&gt;LAMY Safari&lt;/a&gt; 和 &lt;a href=&quot;http://www.amazon.cn/Pilot-%E7%99%BE%E4%B9%90-FP-78G-M-B-22K%E5%8C%85%E9%87%91%E7%AC%94%E5%B0%96%E9%92%A2%E7%AC%94-M%E5%92%80/dp/B003H06HN4&quot;&gt;Pilot 78G&lt;/a&gt;，前者出水猛、更亮骚，后者更朴实好用。铅笔是 &lt;a href=&quot;https://item.taobao.com/item.htm?id=522070211448&quot;&gt;Zebra Tect 0.5&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;软件呢？&lt;/h3&gt;

&lt;p&gt;开发最常用的是买了 License 的 &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 2&lt;/a&gt; 和定制过 &lt;a href=&quot;http://www.vim.org/&quot;&gt;VIM&lt;/a&gt;。浏览器用 &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;。聊天主要还是 QQ/微信，都是被圈子绑架的，Office 之类也同理。其实我特别喜欢 &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; 的概念，但限于团队和网络的问题，只好搞了个 &lt;a href=&quot;https://bearychat.com/&quot;&gt;BearyChat&lt;/a&gt; 和少量熟人自娱自乐。&lt;/p&gt;

&lt;p&gt;生产力工具方面，会使用 &lt;a href=&quot;https://www.onenote.com/&quot;&gt;OneNote&lt;/a&gt; 作为笔记，&lt;a href=&quot;http://pan.baidu.com/&quot;&gt;百度云&lt;/a&gt;作文件共享，&lt;a href=&quot;https://www.wunderlist.com/&quot;&gt;Wunderlist&lt;/a&gt; 作为个人 GTD 管理，工作内容 GTD 用&lt;a href=&quot;https://item.taobao.com/item.htm?spm=2013.1.0.0.xh6pv4&amp;amp;id=45159521615&quot;&gt;败家实验室&lt;/a&gt;不洇墨笔记本。&lt;/p&gt;

&lt;p&gt;日常使用 &lt;a href=&quot;http://reederapp.com/&quot;&gt;Reeder&lt;/a&gt; + &lt;a href=&quot;https://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; 看新闻，不喜欢专门的新闻app。听歌会用 &lt;a href=&quot;https://www.foobar2000.org/&quot;&gt;foobar2000&lt;/a&gt; 和&lt;a href=&quot;http://music.163.com/&quot;&gt;网易云音乐&lt;/a&gt;。除此之外，我喜欢用 &lt;a href=&quot;https://itunes.apple.com/us/app/wordbook-english-dictionary/id289694924?mt=8&quot;&gt;WordBook&lt;/a&gt; 英英词典。&lt;/p&gt;

&lt;p&gt;处理 RAW 图片会用 &lt;a href=&quot;https://lightroom.adobe.com/&quot;&gt;Adobe Lightroom&lt;/a&gt;，而在手机上会混用 &lt;a href=&quot;https://vsco.co/vscocam&quot;&gt;VSCOcam&lt;/a&gt;、&lt;a href=&quot;https://itunes.apple.com/us/app/snapseed/id439438619?mt=8&quot;&gt;Snapseed&lt;/a&gt; 和 &lt;a href=&quot;http://www.enlightapp.com/&quot;&gt;Enlight&lt;/a&gt;，并分享到 &lt;a href=&quot;https://www.instagram.com/&quot;&gt;Instagram&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Finally，必须说一句，&lt;a href=&quot;https://www.linode.com/&quot;&gt;Linode&lt;/a&gt; + &lt;a href=&quot;https://shadowsocks.org&quot;&gt;Shadowsocks&lt;/a&gt; 搭建一套翻墙系统很有必要，这是通往世界之门的钥匙。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;你最理想的工作环境是什么？&lt;/h3&gt;

&lt;p&gt;优雅干净凉快（空调要冷！）的房间，敞亮但有一定的隐私空间。有干净漂亮的休息区，特别是舒服的沙发。窗子外可以看到自然景色，走不多远能找到有情调的咖啡店。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;你平时获得工作灵感的方式有哪些？&lt;/h3&gt;

&lt;p&gt;在本子上写写涂涂画画，浏览 &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; 和各类技术网站。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;推荐一件生活利器给大家。&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.cn/%E4%B8%AA%E6%8A%A4%E5%81%A5%E5%BA%B7/dp/B00HCYFCOQ&quot;&gt;Kleenex 湿厕纸&lt;/a&gt;。原因：擦得就是比普通纸干净。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Nov 2015 22:11:00 +0800</pubDate>
        <link>https://crispgm.com/page/my-tools.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/my-tools.html</guid>
        
        <category>Apps</category>
        
        <category>Tools</category>
        
        <category>利器</category>
        
        
      </item>
    
      <item>
        <title>『推荐』有趣的终端 Terminal 工具</title>
        <description>&lt;h2 id=&quot;doubanfm&quot;&gt;Douban.fm&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Node.js 编写的控制台版的豆瓣fm，Mac 上亲测可用，但不太稳定&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; &lt;a href=&quot;https://github.com/turingou/douban.fm&quot;&gt;https://github.com/turingou/douban.fm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ca0a75a041cb65d1ad9dddc2e44b1c52903db7d0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36316666306465337477316563696a3364713830626a32306d3430657a3735752e6a7067&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gotty&quot;&gt;Gotty&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Go 编写的终端“直播”工具，参见：GoTTY - 将你的 terminal 输出到网页上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; &lt;a href=&quot;https://github.com/yudai/gotty&quot;&gt;https://github.com/yudai/gotty&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yudai/gotty/master/screenshot.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wego&quot;&gt;Wego&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Go 编写的天气预报工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; https://github.com/schachmat/wego&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c3d2b92671f1ded5d5a9a9ebafdc836527f97269/687474703a2f2f7363686163686d61742e6769746875622e696f2f7765676f2f7765676f2e676966&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;qrcode-terminal&quot;&gt;Qrcode-terminal&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt; Node.js 编写的在终端显示二维码工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt; https://github.com/gtanner/qrcode-terminal&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1b87ab92f230c35ff19abf2449e0fd52bea3f124/68747470733a2f2f7261772e6769746875622e636f6d2f6774616e6e65722f7172636f64652d7465726d696e616c2f6d61737465722f6578616d706c652f62617369632e706e67&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 21:09:00 +0800</pubDate>
        <link>https://crispgm.com/page/funny-terminal-tools.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/funny-terminal-tools.html</guid>
        
        <category>Terminal</category>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>Apple iOS m3u8 媒体文件下载</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;由于 Apple iOS 不支持 Adobe Flash 技术，所以在 iOS 上要使用 m3u8 进行多媒体和流媒体等的播放。如：微博视频。&lt;/p&gt;

&lt;p&gt;对于好看的视频，有时候希望能够下载下来，具体方法请看本文介绍。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;m3u8 是 Apple iOS 流媒体使用的一种格式，它本质上是个文本的播放列表，实际的媒体文件是 MPEG2-TS 或者 AAC(Audio Only)。具体可以参考 Wikipedia 的英文介绍：&lt;a href=&quot;https://en.wikipedia.org/wiki/M3U&quot;&gt;https://en.wikipedia.org/wiki/M3U&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;获取 URL&lt;/h3&gt;

&lt;p&gt;首先要拿到 URL，方法是在 Chrome 上用 iPhone6 的 User-Agent 打开，然后在 Chrome 中找到，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/video-url.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://us.sinaimg.cn/000MLkkJjx06TSSGESJF050d010000oz0k01.m3u8?KID=unistore,video&amp;amp;Expires=1437309945&amp;amp;ssig=kh06r9cH7F&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ts-&quot;&gt;获取 ts 文件&lt;/h3&gt;

&lt;p&gt;紧接着下载下来这个文件，用编辑器打开，就会看到里面的内容，是一堆 ts 格式的文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/m3u8-file-content.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;下载源文件&lt;/h3&gt;

&lt;p&gt;把这些 ts 文件名跟 http://us.sinaimg.cn/ 拼在一起下载下来，就是被切成分片的视频源文件了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://crispgm.com/image/ts-file.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;文件合并&lt;/h3&gt;

&lt;p&gt;最后，就是把这一堆文件合并在一起&lt;/p&gt;

&lt;p&gt;有两种方法，一种比较粗暴，就是强型把文件的内容合并到一个文件中。&lt;/p&gt;

&lt;p&gt;如：源文件是 1.ts 和 2.ts&lt;/p&gt;

&lt;p&gt;那么就：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat 2.ts &amp;gt;&amp;gt; 1.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样，视频完全可以看，只不过因为 meta 信息还是 1.ts 的，会导致视频进度条显示不正确。&lt;/p&gt;

&lt;p&gt;如果想优雅的合并，就需要专门的合并工具，强大开源工具 ffmpeg 是可以的。安装方法就不多讲了，同学们可以自己编译一个。对于 Mac 用户来说，可以去 &lt;a href=&quot;http://ffmpegmac.net/&quot;&gt;ffmpegmac&lt;/a&gt;直接下载编译好的二进制版本。&lt;/p&gt;

&lt;p&gt;安装好 ffmpeg 后，执行下面的命令就可以完成合并：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i &quot;concat:1.ts|2.ts&quot; -c copy output.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，ffmpeg 功能还很强大，比如保存成其它格式什么的。有兴趣可以深入探索下。&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Jul 2015 13:43:00 +0800</pubDate>
        <link>https://crispgm.com/page/downloading-m3u8-video.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/downloading-m3u8-video.html</guid>
        
        <category>Apple</category>
        
        <category>iOS</category>
        
        <category>ts</category>
        
        <category>m3u8</category>
        
        <category>ffmpeg</category>
        
        
      </item>
    
      <item>
        <title>BigPipe 实践 (nginx + hhvm)</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;随着 Web 页面的功能不断堆砌（其实我是极简主义者，但PM或者说是国内的风气，总是喜欢不断加入各类功能），页面需要的数据越来越多，串行连接后端的耗时自然是不断增大。常见的优化手段就是后端并行化，而对于前端来说，后端并行化只是降低了 response time，但用户最终看到页面的时间并没有减少。&lt;/p&gt;

&lt;p&gt;Facebook 提出了 BigPipe 的方案，讲页面功能分块，分成若干个 pagelet。pagelet 的加载使用了 http 的 chunked 特性，采用类似 Pipeline 的方式进行前后端数据传输。浏览器端会首先获得一个框架层的 HTML/css，以及基础 JavaScript 代码。同时，后端也可以进行并行化，每个 pagelet 完成后，通过 flush 输出到浏览器。浏览器端的 JavaScript 基于事件机制，收到数据后进行渲染。&lt;/p&gt;

&lt;p&gt;这样，前后端就可以都做到并行化，用户可以先看到部分页面内容，从而获得了更好的用户体验。目前，国外主要是 Facebook 应用了这项技术，而国内微博也通过 BigPipe 获得了不错的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/fb-bigpipe.png&quot; alt=&quot;Facebook-BigPipe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图：Facebook 加载时的 timing，可以看到 waiting 时间（也就是后端响应时间 response time）明显低于 content download 耗时。&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;简单 Demo&lt;/h2&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    echo &#39;hello&#39;;
    flush();
    ob_flush();
    sleep(1);
    echo &#39;world&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是一个最简单的 BigPipe demo，然而由于 fastcgi_buffer 的存在，并不能看到分段输出的效果。那么，我们把程序进行一下改动，用 str_pad 填充一些字符以达到 buffer。ps：吐槽一下 str_pad 这个函数名，明明 str 系列函数都是不带下划线的，如 strlen, strcpy 等，但这个函数却有下划线。str 系列函数表示：我们之间出现了叛徒！&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    echo str_pad(&#39;hello&#39;, 10000, &#39; &#39;);
    flush();
    ob_flush();
    sleep(1);
    echo str_pad(&#39;world&#39;, 10000, &#39; &#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进行字符填充后，BigPipe 效果显现了出来，hello 之后过1秒后会才会出现 world。由此可见，buffer 这块是个问题，后面会单独具体介绍科学优雅的解决方法。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;整体设计&lt;/h3&gt;

&lt;p&gt;BigPipe 的整体方案是需要具体实现环节分为如下几部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;BigPipe 框架。包括前端和后端两部分，以及对于不支持 BigPipe 模式的流量器启用的降级模式。此外，为了便于 SEO，对于搜索引擎 Spider 的抓取也要使用降级模式。&lt;/li&gt;
  &lt;li&gt;Pagelet 和 DataProvider 管理维护制度。这是一项管理上的措施，主要是为了管理 Pagetlet、DataProvider 以及其之间的依赖关系。&lt;/li&gt;
  &lt;li&gt;BigPipe 调试工具。由于在 BigPipe 开发模式中，后端开发负责 DataProvider，前端人员负责 Pagelet，双方需要调试工具进行独立开发调试。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;潜在问题&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;页面交叉调用过多，导致 pipe 输出效果并不好&lt;/li&gt;
  &lt;li&gt;前端的误调用会影响后端的响应时间&lt;/li&gt;
  &lt;li&gt;后端性能优化需要前端配合&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;异步并行框架&lt;/h3&gt;

&lt;p&gt;由于贴吧现有框架本身并不支持纯异步调用，只支持阻塞并行的远程调用(ral_multi)，其响应时间为：
&lt;code class=&quot;highlighter-rouge&quot;&gt;
    t = max(t1, t2, t3...)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;框架本身需要升级，在升级完成前需要基于现有架构模拟纯异步，并且要在框架支持纯异步后，平滑对 DataProvider 透明地迁移成纯异步模式。&lt;/p&gt;

&lt;p&gt;因此，BigPipe 并行框架采用异步-回调模式，通过状态机模拟异步过程。状态机会以深度优先遍历 DataProvider 以及其依赖的 DataProvider，并初始化成 &lt;strong&gt;INITIAL&lt;/strong&gt; 状态。没有依赖的 DataProvider 会直接执行，进入 &lt;strong&gt;EXECUTING&lt;/strong&gt; 状态。当一个有依赖的 DataProvider 的依赖已经全部处于 &lt;strong&gt;READY&lt;/strong&gt; 状态时，则会同一般的 DataProvider 一样 execute 执行。execute 函数中会有数据交互和业务逻辑处理，当处理完毕后需要主动调用 ready 函数将 DataProvider 自身置为 &lt;strong&gt;READY&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Pagelet 依赖的 DataProvider 都 &lt;strong&gt;READY&lt;/strong&gt; 后，就会渲染页面。&lt;/p&gt;

&lt;h3 id=&quot;buffer&quot;&gt;Buffer问题&lt;/h3&gt;

&lt;p&gt;由于“各路” buffer 的存在，如果包比较小的话 BigPipe 的 chunked 输出很可能会被 buffer 住。针对这种情况，一般来说有两种方式。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用 strpad 这类函数进行填充，如：填充空格。永远将一次 flush 的数据填充到 buffer_size。&lt;/li&gt;
  &lt;li&gt;调小 buffer，让数据更容易达到 buffer_size。&lt;/li&gt;
  &lt;li&gt;关闭 buffer。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于 Nginx 来说，会有 proxy_buffer 和 fastcgi_buffer。第一种方式，不用调整 buffer，但这种方式很不优雅，而且增加了带宽，并不是很合理。至于调小 buffer，这看起来是一个很好的思路，然而对于 gzip 过的数据来说，最小的 buffer 可能也比较大。因此，我们选择了关闭 proxy_buffer 和 fastcgi_buffer。&lt;/p&gt;

&lt;p&gt;然而，这样带来了一个问题。线上运行中的 Nginx 1.4.4版本过低，关闭 proxy_buffer 的指令 proxy_buffering off 原生就支持。而关闭 fastcgi_buffer 的 fastcgi_buffering 需要1.5.6版本。所以首先，我们把 Nginx 版本升级到了1.7.8，重编译后上线。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Syntax: fastcgi_buffering on | off;
    Default: fastcgi_buffering on;
    Context: http, server, location
    This directive appeared in version 1.5.6.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;详见 &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering&quot;&gt;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # 旧版本的Nginx并不支持fastcgi_buffering
    nginx: [emerg] unknown directive &quot;fastcgi_buffering&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有一个问题，就是我们并不想对所有请求都关闭 buffer。为了将影响面做得最小，我们只想关闭特定模块的 buffer。改 nginx.conf 固然可以实现，不过对于不支持嵌套 if 的 nginx.conf 来说这是个很不舒服的用法。&lt;/p&gt;

&lt;p&gt;幸好，在升级的过程中，发现了一个刚好可以用 http header，用于关闭 buffer。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Buffering can also be enabled or disabled by passing “yes” or “no” in the “X-Accel-Buffering” response header field. This capability can be disabled using the fastcgi_ignore_headers directive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此，配置上完全不用关闭 buffer，只需要在 php 代码中加 header 就好，顺利把 buffer 优雅关闭。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    header(&#39;X-Accel-Buffering: no&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;效果评估&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TTFB时间减少56% (TTFB = time to first byte)&lt;/li&gt;
  &lt;li&gt;白屏时间减少59%&lt;/li&gt;
  &lt;li&gt;降低了局部刷新开发成本&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-6&quot;&gt;其它总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开发迁移时间超长，从立项到上线总共持续了半年，前端主要开发人员因为离职等原因换了三波&lt;/li&gt;
  &lt;li&gt;底层本质上还无法并发，优化效果远远不够彻底&lt;/li&gt;
  &lt;li&gt;pagelet 交叉请求比较多，效果没有那么好&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 26 Jun 2015 16:23:00 +0800</pubDate>
        <link>https://crispgm.com/page/bigpipe-practice.html</link>
        <guid isPermaLink="true">https://crispgm.com/page/bigpipe-practice.html</guid>
        
        <category>BigPipe</category>
        
        <category>nginx</category>
        
        <category>hhvm</category>
        
        <category>php</category>
        
        
      </item>
    
  </channel>
</rss>
