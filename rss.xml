<?xml version="1.0"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"
                    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    xmlns:atom="http://www.w3.org/2005/Atom"
                    xmlns:sy="http://purl.org/rss/1.0/modules/syndication"
                    xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
<channel>
<title>Crisp Blog</title>
<link>http://crispgm.com</link>
<description>Crisp 个人博客</description>
<atom:link href="http://crispgm.com/rss.xml" rel="self" type="application/rss+xml"/><author>Crisp</author><language>zh-cn</language>
<lastBuildDate>Mon, 07 Dec 2015 16:26:59 +0800</lastBuildDate>
<item>
<title><![CDATA[Environment Pollution in a Photographer's View]]></title>
<link>http://crispgm.com/page/environment-pollution-in-a-photographer-view.html</link>
<guid isPermaLink="true">http://crispgm.com/page/environment-pollution-in-a-photographer-view.html</guid>
<pubDate>Fri, 04 Dec 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>On November 14th, it was a haze day with an AQI over 200 and I went to Beijing University of Chemical Technology.I took some photo in the campus. Thanks to my basic skills of Adobe Photoshop Lightroom and VSCOcam, it looks pretty good now by enhancing the orange and yellow color, removing the arrow on the ground and cropping into a square one.</p><p><img alt="" src="/photo/beijing-autumn.jpg" /></p><p>As soon as my surprise fade out, I was feeling sad that:</p><blockquote><p>We can use technology stuffs like RAW, Lightroom and VSCOcam to make the leaves become either green or yellow, and even remove the arrow by the "Spot Removal" tool. However, it is impossible to make a blue sky and breathe the fresh air when taking photos in such a haze day. That's why environment pollution is a serious problem.</p></blockquote><p>That's a photographer's view of environment pollution.</p><p>And here I ask for the beautiful environment and fresh air.</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[[推荐]猫舌怕烫烫——足控福利的冷餐美食剧]]></title>
<link>http://crispgm.com/page/cat-tongue-play.html</link>
<guid isPermaLink="true">http://crispgm.com/page/cat-tongue-play.html</guid>
<pubDate>Sat, 28 Nov 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>《猫舌怕烫烫》是由恭喜发财工作室2015年制作的和风日系清新治愈系美食剧，由林晶执导，夏决心共同编剧。女主角是个有着猫舌体质的脑洞少女。</p><h3>剧集介绍</h3><p>方糖糖是一个有着猫舌体质的大二设计系女生，爱幻想、爱美食，也爱将眼前的事物画下来。她在课余会兼职平面模特，mv演员等，每当结束了拍摄工作，她并不急于回家，而是游荡在杭州的街头巷尾，像一只猫咪嗅着甜品和不同于传统中式烹饪的新形“冷食”。</p><h3>剧集链接</h3><p>（共6回）<a href="http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html"><a href="http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html">http://v.qq.com/detail/w/wasgq6dzfy0h2ca.html</a></a></p><h3>个人评价</h3><p>虽说三次元听到“阿勒”之类的可能不让人很适应，但这个剧的题材和风格的确很让人很喜欢。女主角很萌，吃东西的时候表情刚刚好体现出食物的美好。剧集本身不太喜欢的是一些搞笑的梗，比如让我纵向丝滑什么的。</p><p>最后，感谢所有制作人和<a href="http://weibo.com/u/1762833134">女主</a>给我们带来这么好看的剧，一些剧照给懂的喜欢的人看。</p><p><img alt="" src="/image/p2285703042.jpg" /></p><p><img alt="" src="/image/p2285703047.jpg" /></p><p><img alt="" src="/image/p2288150825.jpg" /></p><p><img alt="" src="/image/p2288151541.jpg" /></p><p><img alt="" src="/image/p2288151554.jpg" /></p>]]></content:encoded>
</item>
<item>
<title><![CDATA[创造者和他们的工具——我的利器]]></title>
<link>http://crispgm.com/page/my-tools.html</link>
<guid isPermaLink="true">http://crispgm.com/page/my-tools.html</guid>
<pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>一不小心看到<a href="http://liqi.io/">利器</a>这个分享“工作时所使用的工具，以及使用工具的方式和原则”的网站。由于自我感觉算不上“优秀的创造者”，顾按照利器的格式写一篇在自己博客上和大家分享。</p><h3>介绍一下你自己和所做的工作。</h3><p>我是Crisp，名字叫David Zhang，目前在做Web开发相关的工作。</p><h3>你都在使用哪些硬件？</h3><p>工作开发目前在<a href="http://shop.lenovo.com/us/en/laptops/thinkpad/x-series/x230/">ThinkPad X230</a>上进行，因为是公司配的，外接<a href="http://www.lg.com/us/commercial/lcd-computer-monitors/lg-IPS224T-PN">LG IPS224T</a>显示器和<a href="http://cherrycorp.com/product/g80-3850-mx-brown-3-0-keyboard/">Cherry MX 茶轴</a>机械键盘。比起同系列的其它代产品（X220或X240之类），X230是比较好用的。但我更喜欢Mac，在家会用<a href="http://www.apple.com/macbook-air/">MacBook Air</a>，数据会备份到<a href="http://www.wdc.com/cn/products/products.aspx?id=1000">WD My Passport Ultra</a>。ps：明年3月公司电脑就可以升级成<a href="http://www.apple.com/macbook-pro/">MacBook Pro</a>了。</p><p>日常来说手机用<a href="http://www.apple.com/shop/buy-iphone/iphone6">iPhone 6</a>，阅读会选择<a href="http://www.amazon.com/Kindle-Paperwhite-Touch-light/dp/B007OZNZG0">Kindle Paperwhite</a>，方便且便宜。不过对于技术/工具书会选择实体版的，不为收藏，只为便于翻找。工作时用<a href="http://en-us.sennheiser.com/over-ear-headphones-hd-202">Sennhaiser HD202II</a>听音乐，家里放着一台<a href="http://www.bose.cn/product.aspx?cid=632">BOSE Wave Music System III</a>，支持AUX IN连接电脑，偶尔也可以听收音机和CD。摄影用<a href="http://www.sonystyle.com.cn/products/cyber-shot/dsc_rx100m3.htm?ssid=sstp01354">SONY 黑卡 RX100III</a>或手机，以后计划购入SONY微单。</p><p>除去电子设备，我有两只钢笔，分别是<a href="http://www.lamy.com/eng/b2c/safari">LAMY Safari</a>和<a href="http://www.amazon.cn/Pilot-%E7%99%BE%E4%B9%90-FP-78G-M-B-22K%E5%8C%85%E9%87%91%E7%AC%94%E5%B0%96%E9%92%A2%E7%AC%94-M%E5%92%80/dp/B003H06HN4">Pilot 78G</a>，前者出水猛、更亮骚，后者更朴实好用。</p><h3>软件呢？</h3><p>开发最常用的是买了License的<a href="http://www.sublimetext.com/">Sublime Text 2</a>和定制过<a href="http://www.vim.org/">VIM</a>。浏览器用<a href="https://www.google.com/chrome/">Chrome</a>。聊天主要还是qq和微信，都是被圈子绑架的，Office之类也同理。其实我特别喜欢<a href="https://slack.com/">Slack</a>，但限于团队和网络的问题，我只好搞了个<a href="https://bearychat.com/">BearyChat</a>和少量熟人自娱自乐。</p><p>生产力工具方面，会使用<a href="https://www.onenote.com/">OneNote</a>作为笔记，<a href="">百度云</a>作文件共享，<a href="https://www.wunderlist.com/">Wunderlist</a>作为个人GTD管理，工作内容用<a href="https://item.taobao.com/item.htm?spm=2013.1.0.0.xh6pv4&amp;id=45159521615">败家实验室</a>不洇墨笔记本GTD。</p><p>日常使用<a href="http://reederapp.com/">Reeder</a>+<a href="https://getpocket.com/">Pocket</a>看新闻，不喜欢专门的新闻app。听歌会用<a href="https://www.foobar2000.org/">foobar2000</a>和<a href="http://music.163.com/">网易云音乐</a>。除此之外，我喜欢用<a href="https://itunes.apple.com/us/app/wordbook-english-dictionary/id289694924?mt=8">WordBook</a>英英词典作为词典，这样对英语提升比英汉会大一些。</p><p>处理RAW图片会用<a href="https://lightroom.adobe.com/">Adobe Lightroom</a>，而在手机上会混用<a href="https://vsco.co/vscocam">VSCOcam</a>、<a href="https://itunes.apple.com/us/app/snapseed/id439438619?mt=8">Snapseed</a>和<a href="http://www.enlightapp.com/">Enlight</a>，并分享到<a href="https://www.instagram.com/">Instagram</a>上。</p><p>Finally，必须说一句，<a href="https://www.linode.com/">Linode</a>+<a href="https://shadowsocks.org">Shadowsocks</a>搭建一套翻墙系统很有必要，这是通往世界之门的钥匙。</p><h3>你最理想的工作环境是什么？</h3><p>优雅干净凉快（空调要冷！）的房间，敞亮但有一定的隐私空间。有干净漂亮的休息区，特别是舒服的沙发。窗子外可以看到自然景色，走不多远能找到有情调的咖啡店。</p><h3>你平时获得工作灵感的方式有哪些？</h3><p>在本子上写写涂涂画画，上上<a href="https://github.com/">GitHub</a>和各类技术网站。</p><h3>推荐一件生活利器给大家。</h3><p><a href="http://www.amazon.cn/%E4%B8%AA%E6%8A%A4%E5%81%A5%E5%BA%B7/dp/B00HCYFCOQ">Kleenex 湿厕纸</a>。原因：擦得就是比普通纸干净。</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[[推荐]有趣的终端Terminal工具]]></title>
<link>http://crispgm.com/page/funny-terminal-tools.html</link>
<guid isPermaLink="true">http://crispgm.com/page/funny-terminal-tools.html</guid>
<pubDate>Thu, 22 Oct 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h4>Douban.fm</h4><p><strong>简介</strong> Node.js编写的控制台版的豆瓣fm，mac上亲测可用，但不太稳定</p><p><strong>Link</strong> <a href="https://github.com/turingou/douban.fm"><a href="https://github.com/turingou/douban.fm">https://github.com/turingou/douban.fm</a></a></p><p><img alt="" src="https://camo.githubusercontent.com/ca0a75a041cb65d1ad9dddc2e44b1c52903db7d0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f36316666306465337477316563696a3364713830626a32306d3430657a3735752e6a7067" /></p><h4>Gotty</h4><p><strong>简介</strong> Go编写的终端“直播”工具，参见：GoTTY - 将你的terminal输出到网页上</p><p><strong>Link</strong> <a href="https://github.com/yudai/gotty"><a href="https://github.com/yudai/gotty">https://github.com/yudai/gotty</a></a></p><p><img alt="" src="https://raw.githubusercontent.com/yudai/gotty/master/screenshot.gif" /></p><h4>Wego</h4><p><strong>简介</strong> Go编写的天气预报工具</p><p><strong>Link</strong> <a href="https://github.com/schachmat/wego">https://github.com/schachmat/wego</a></p><p><img alt="" src="https://camo.githubusercontent.com/c3d2b92671f1ded5d5a9a9ebafdc836527f97269/687474703a2f2f7363686163686d61742e6769746875622e696f2f7765676f2f7765676f2e676966" /></p><h4>Qrcode-terminal</h4><p><strong>简介</strong> Node.js编写的在终端显示二维码工具</p><p><strong>Link</strong> <a href="https://github.com/gtanner/qrcode-terminal">https://github.com/gtanner/qrcode-terminal</a></p><p><img alt="" src="https://camo.githubusercontent.com/1b87ab92f230c35ff19abf2449e0fd52bea3f124/68747470733a2f2f7261772e6769746875622e636f6d2f6774616e6e65722f7172636f64652d7465726d696e616c2f6d61737465722f6578616d706c652f62617369632e706e67" /></p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Apple iOS m3u8 媒体文件下载]]></title>
<link>http://crispgm.com/page/downloading-m3u8-video.html</link>
<guid isPermaLink="true">http://crispgm.com/page/downloading-m3u8-video.html</guid>
<pubDate>Sun, 19 Jul 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h2>背景</h2><p>由于Apple iOS不支持Adobe Flash技术，所以在iOS上要使用m3u8进行多媒体和流媒体等的播放。如：微博视频。</p><p>对于好看的视频，有时候希望能够下载下来，具体方法请看本文介绍。</p><h2>简介</h2><p>m3u8是Apple iOS流媒体使用的一种格式，它本质上是个文本的播放列表，实际的媒体文件是MPEG2-TS或者AAC(Audio Only)。具体可以参考Wikipedia的英文介绍：<a href="https://en.wikipedia.org/wiki/M3U"><a href="https://en.wikipedia.org/wiki/M3U">https://en.wikipedia.org/wiki/M3U</a></a></p><h3>获取URL</h3><p>首先要拿到URL，方法是在chrome上用iPhone6的User-Agent打开，然后在chrome中找到，如下：</p><p><img alt="" src="http://crispgm.com/image/video-url.png" /></p><blockquote><p><a href="http://us.sinaimg.cn/000MLkkJjx06TSSGESJF050d010000oz0k01.m3u8?KID=unistore,video&amp;Expires=1437309945&amp;ssig=kh06r9cH7F">http://us.sinaimg.cn/000MLkkJjx06TSSGESJF050d010000oz0k01.m3u8?KID=unistore,video&amp;Expires=1437309945&amp;ssig=kh06r9cH7F</a></p></blockquote><h3>获取ts文件</h3><p>紧接着下载下来这个文件，用编辑器打开，就会看到里面的内容，是一堆ts格式的文件。</p><p><img alt="" src="http://crispgm.com/image/m3u8-file-content.png" /></p><h3>下载源文件</h3><p>把这些ts文件名跟<a href="http://us.sinaimg.cn/">http://us.sinaimg.cn/</a>拼在一起下载下来，就是被切成分片的视频源文件了。</p><p><img alt="" src="http://crispgm.com/image/ts-file.png" /></p><h3>文件合并</h3><p>最后，就是把这一堆文件合并在一起</p><p>有两种方法，一种比较粗暴，就是强型把文件的内容合并到一个文件中。</p><p>如：源文件是1.ts和2.ts</p><p>那么就：</p><pre><code>cat 2.ts &gt;&gt; 1.ts</code></pre><p>这样，视频完全可以看，只不过因为meta信息还是1.ts的，会导致视频进度条显示不正确。</p><p>如果想优雅的合并，就需要专门的合并工具，强大开源工具ffmpeg是可以的。安装方法就不多讲了，同学们可以自己编译一个。对于mac用户来说，可以去<a href="http://ffmpegmac.net/">ffmpegmac</a>直接下载编译好的二进制版本。</p><p>安装好ffmpeg后，执行下面的命令就可以完成合并：</p><pre><code>ffmpeg -i "concat:1.ts|2.ts" -c copy output.ts</code></pre><p>当然，ffmpeg功能还很强大，比如保存成其它格式什么的。有兴趣可以深入探索下。</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[BigPipe实践(nginx+hhvm)]]></title>
<link>http://crispgm.com/page/bigpipe-practice.html</link>
<guid isPermaLink="true">http://crispgm.com/page/bigpipe-practice.html</guid>
<pubDate>Fri, 26 Jun 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h2>背景</h2><p>随着Web页面的功能不断堆砌（其实我是极简主义者，但PM或者说是国内的风气，总是喜欢不断加入各类功能），页面需要的数据越来越多，串行连接后端的耗时自然是不断增大。常见的优化手段就是后端并行化，而对于前端来说，后端并行化只是降低了response time，但用户最终看到页面的时间并没有减少。</p><p>Facebook提出了BigPipe的方案，讲页面功能分块，分成若干个pagelet。pagelet的加载使用了http的chunked特性，采用类似Pipeline的方式进行前后端数据传输。浏览器端会首先获得一个框架层的HTML/css，以及基础js代码。同时，后端也可以进行并行化，每个pagelet完成后，通过flush输出到浏览器。浏览器端的js基于事件机制，收到数据后进行渲染。</p><p>这样，前后端就可以都做到并行化，用户可以先看到部分页面内容，从而获得了更好的用户体验。目前，国外主要是Facebook应用了这项技术，而国内微博也通过BigPipe获得了不错的效果。</p><p><img alt="Facebook-BigPipe" src="/image/fb-bigpipe.png" /></p><p>图：Facebook加载时的timing，可以看到waiting时间（也就是后端响应时间response time）明显低于content download耗时。</p><h2>简单Demo</h2><pre><code class="language-php">    echo 'hello';    flush();    ob_flush();    sleep(1);    echo 'world';</code></pre><p>这是一个最简单的BigPipe demo，然而由于fastcgi_buffer的存在，并不能看到分段输出的效果。那么，我们把程序进行一下改动，用str_pad填充一些字符以达到buffer。ps：吐槽一下str_pad这个函数名，明明str系列函数都是不带下划线的，如strlen, strcpy等，但这个函数却有下划线。str系列函数表示：我们之间出现了叛徒！</p><pre><code class="language-php">    echo str_pad('hello', 10000, ' ');    flush();    ob_flush();    sleep(1);    echo str_pad('world', 10000, ' ');</code></pre><p>进行字符填充后，BigPipe效果显现了出来，hello之后过1秒后会才会出现world。由此可见，buffer这块是个问题，后面会单独具体介绍科学优雅的解决方法。</p><h2>实践</h2><h3>整体设计</h3><p>BigPipe的整体方案是需要具体实现环节分为如下几部分：</p><ol><li>BigPipe框架。包括前端和后端两部分，以及对于不支持BigPipe模式的流量器启用的降级模式。此外，为了便于SEO，对于搜索引擎Spider的抓取也要使用降级模式。</li><li>Pagelet和DataProvider管理维护制度。这是一项管理上的措施，主要是为了管理Pagetlet、DataProvider以及其之间的依赖关系。</li><li>BigPipe调试工具。由于在BigPipe开发模式中，后端开发负责DataProvider，前端人员负责Pagelet，双方需要调试工具进行独立开发调试。</li></ol><h3>潜在问题</h3><ol><li>页面交叉调用过多，导致pipe输出效果并不好</li><li>前端的误调用会影响后端的响应时间</li><li>后端性能优化需要前端配合</li></ol><h3>异步并行框架</h3><p>由于贴吧现有框架本身并不支持纯异步调用，只支持阻塞并行的远程调用(ral_multi)，其响应时间为：</p><pre><code>    t = max(t1, t2, t3...)</code></pre><p>框架本身需要升级，在升级完成前需要基于现有架构模拟纯异步，并且要在框架支持纯异步后，平滑对DataProvider透明地迁移成纯异步模式。</p><p>因此，BigPipe并行框架采用异步-回调模式，通过状态机模拟异步过程。状态机会以深度优先遍历DataProvider以及其依赖的DataProvider，并初始化成<strong>INITIAL</strong>状态。没有依赖的DataProvider会直接执行，进入<strong>EXECUTING</strong>状态。当一个有依赖的DataProvider的依赖已经全部处于<strong>READY</strong>状态时，则会同一般的DataProvider一样execute执行。execute函数中会有数据交互和业务逻辑处理，当处理完毕后需要主动调用ready函数将DataProvider自身置为<strong>READY</strong>。</p><p>Pagelet依赖的DataProvider都<strong>READY</strong>后，就会渲染页面。</p><h3>Buffer问题</h3><p>由于“各路”buffer的存在，如果包比较小的话BigPipe的chunked输出很可能会被buffer住。针对这种情况，一般来说有两种方式。</p><ol><li>使用strpad这类函数进行填充，如：填充空格。永远将一次flush的数据填充到buffer_size。</li><li>调小buffer，让数据更容易达到buffer_size。</li><li>关闭buffer。</li></ol><p>对于Nginx来说，会有proxy_buffer和fastcgi_buffer。第一种方式，不用调整buffer，但这种方式很不优雅，而且增加了带宽，并不是很合理。至于调小buffer，这看起来是一个很好的思路，然而对于gzip过的数据来说，最小的buffer可能也比较大。因此，我们选择了关闭proxy_buffer和fastcgi_buffer。</p><p>然而，这样带来了一个问题。线上运行中的Nginx 1.4.4版本过低，关闭proxy_buffer的指令proxy_buffering off原生就支持。而关闭fastcgi_buffer的fastcgi_buffering需要1.5.6版本。所以首先，我们把Nginx版本升级到了1.7.8，重编译后上线。</p><pre><code>    Syntax: fastcgi_buffering on | off;    Default: fastcgi_buffering on;    Context: http, server, location    This directive appeared in version 1.5.6.</code></pre><p>详见<a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering"><a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering</a></a></p><pre><code>    # 旧版本的Nginx并不支持fastcgi_buffering    nginx: [emerg] unknown directive "fastcgi_buffering"</code></pre><p>还有一个问题，就是我们并不想对所有请求都关闭buffer。为了将影响面做得最小，我们只想关闭特定模块的buffer。改nginx.conf固然可以实现，不过对于不支持嵌套if的nginx.conf来说这是个很不舒服的用法。</p><p>幸好，在升级的过程中，发现了一个刚好可以用http header，用于关闭buffer。</p><blockquote><p>Buffering can also be enabled or disabled by passing “yes” or “no” in the “X-Accel-Buffering” response header field. This capability can be disabled using the fastcgi_ignore_headers directive.</p></blockquote><p>因此，配置上完全不用关闭buffer，只需要在php代码中加header就好，顺利把buffer优雅关闭。</p><pre><code class="language-php">    header('X-Accel-Buffering: no');</code></pre><h3>效果评估</h3><ul><li>TTFB时间减少56% (TTFB = time to first byte)</li><li>白屏时间减少59%</li><li>降低了局部刷新开发成本</li></ul><h3>其它总结</h3><ul><li>开发迁移时间超长，从立项到上线总共持续了半年，前端主要开发人员因为离职等原因换了三波</li><li>底层本质上还无法并发，优化效果远远不够彻底</li><li>pagelet交叉请求比较多，效果没有那么好</li></ul>]]></content:encoded>
</item>
<item>
<title><![CDATA[SNH48剧场公演游记]]></title>
<link>http://crispgm.com/page/SNH48-Theater.html</link>
<guid isPermaLink="true">http://crispgm.com/page/SNH48-Theater.html</guid>
<pubDate>Mon, 18 May 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h3>前言</h3><p>作为多年的AKB48伪饭和新近的SNH48粉，我在五一期间同<a href="http://yeyekooo.crispgm.com">小咩酱</a>亲自前往了SNH48星梦剧院，观看SNH48 Team HII<a href="http://www.snh48.com/show_7.html">“青春派对”</a>和Team SII<a href="http://www.snh48.com/show_8.html">“勇气重生”</a>剧场公演。</p><p>所谓剧场公演，不同于演唱会，而是在SNH48星梦剧院小剧场（大小可参考电影院小型放映厅）举行的例行演出，时间一般在周末中午和晚上（周三和周四晚也会有）。剧场公演一般持续2个多小时，总共有15首左右的曲子，加上3首左右的返场曲目。门票很便宜，普通坐票只要80元，VIP坐票168元。不过VIP只卖给VIP会员，想成为VIP需要在官网累计购买3000元的物品。值得一提的是，还有一种80元的普通站票。站位是最靠近舞台的位置，真的可以看得非常清楚。目前，Team SII和Team NII的任何公演任意类型的票都会一经放出就被秒杀，Team HII因为成立时间不长，没那么火，所以基本想买随时可以买到。</p><h3>开赴现场</h3><p>5月1日下午18点，我赶到了位于虹口区海伦路的SNH48星梦剧院。</p><p><img alt="SNH48 Theater" src="http://crispgm.com/image/snh48-theater.jpg" /></p><p>公演开始前，需要用微信上的二维码换取实体票，换取的时候采用抽取方式。</p><p>此外，粉丝们一般会拿出护照前往盖章处盖章。这是我的护照：</p><p><img alt="SNH48 Passport" src="http://crispgm.com/image/snh48-passport.jpg" /></p><p>集章会有很多会员福利，具体可参考如下表格：</p><p><img alt="SNH48 Welfare" src="http://crispgm.com/image/snh48-welfare.jpg" /></p><p>从表格可以看到，作为“可以见面的偶像”，粉丝通过集章可以获得若干和偶像亲密接触的机会。当然获得机会的方法不止这一种，最简单的方式就是剧场公演结束后的击掌会。参与者可以和每位成员依次击掌。除此之外，购买专辑CD 100%赠送握手券，一次握手券可以在握手会同一名成员握手10秒中，最多可一次使用200张。并且，买CD会有一定概率获得合影券，一次订单买10张专辑会100%中合影券，也就是780元。</p><p>进入会场后，目测来说，宅男比较多，妹子们只有1/5不到，且其中很大一部分都是女仆娘，如图：</p><p><img alt="SNH48 Audience" src="http://crispgm.com/image/snh48-audience.jpg" /></p><h3>应援准备</h3><p>应援的标准装备是闪光棒，官网会根据队伍推出特定颜色的闪光棒，可以复用。如图：蓝色为Team SII的款式，紫色为Team NII的款式。此外，一些特定的歌曲，会使用特定颜色的闪光棒。应援是48 Group的一大特点，应援口号和装备相对统一化，现场气氛非常具有感染力，而不是随意的尖叫呐喊。不过这其实也大大增加了入门难度，我从开始看AKB48到基本学会Mix过了足足2年多。当然，这并不是多难，而是相关的视频资料真心不多。</p><p>图中的围巾也是应援装备之一，专用于歌曲《飞机云》。</p><p><img alt="SNH48 Lightstick and Scarf" src="http://crispgm.com/image/snh48-lightstick.jpg" /></p><h3>演出开始</h3><p><img alt="SNH48 Team HII" src="http://crispgm.com/image/snh48-team-HII.jpg" /></p><p>第一项是由一名成员朗读的剧场相关规定。其中就包括了禁止拍照、录像、录音的限制，在大型演唱会中几乎全场都在拍照录像无法控制。而在剧场中，观众四周有较多的工作人员进行“执法”。</p><p>由于对Team HII队不够熟悉，因此本人本节主要讲Team SII的勇气重生公演。勇气重生公演对应的是AKB48本部Team K的~RESET~公演，RESET被“翻译”成“勇气重生”。AKB48 Team K的特点是，成员比较有元气（日本中文，约等于活力）、歌曲比较燃还有就是跳舞动作非常有力，性格甚至长相不乏女汉子倾向。队内这种风格的代表人物有大岛优子（原AKB48 Top成员）、秋元才加（外号大帅，有8块腹肌），还有就是在SNH48 Team SII兼任的日本队员宫泽佐江，不过她现在已经基本不参加SNH48的活动，只是挂名。</p><h4>公演歌单</h4><ol><li><p>柠檬的年纪</p></li><li>勇气重生</li><li>焕然一新</li><li>能做你的女友吗</li><li>呜吼吼</li><li>再见，制服</li><li>错过奇迹</li><li>王子殿下</li><li>献给明天的吻</li><li>心的港湾</li><li>毒蜘蛛</li><li>放手一搏</li><li>白色情人节</li><li>记忆的拼图</li><li>仰望星空</li><li>日升日落</li><li>新的旅程</li></ol><p>第0首（这么说起来很geek范）是由前作女孩，其实也就是替补成员演出的歌曲。由于公演每周末都会有2场，当遇到有成员因为公务或者私事请假时，就会派出替补成员。如果主力都来齐的话，就只能靠这第0首歌曲露脸了。当然，很多公演根本就没有这个环节。</p><p>前作女孩的表演结束后，就是Overture。这是48 Group出场的惯例，基本上只要有表演就会以Overture开头。Overture算不上歌曲，主要的作用是调动气氛，粉丝们会在此时喊很长的一段应援口号。</p><p>第一首《勇气重生》就是AKB48的Reset，歌曲本身非常燃，跳舞动作非常有力。可以说，看到这里整个人的气氛都起来了，开始拼命的喊Mix Call。每一句，都会大声喊出正在演唱的成员的名字。其中，队长莫寒由于几乎每首都是第一个唱，所以被喊得的次数极多。其次就是，一些比较火的成员，如赵嘉敏Savoki、张语格和湾湾邱欣怡，声势明显大于一般的成员。</p><p>前四首都属于比较high的歌曲，之后会进入全员MC环节，每个成员会进行自我介绍。本人对MC和综艺一直兴趣一般，所以就不多评价。之后，若干波Unit曲以及小规模的MC，以及成员钱蓓婷的生日庆祝活动“生诞祭”，在此再祝福一下钱妹生日快乐。</p><p>最后，公演以几首集体表演的曲子结束。由于“生诞祭”拖得有点长，到了最后几首曲子时，粉丝们已经明显喊不动了。结束时，《勇气重生》的歌曲再次响起，成员们纷纷与粉丝招手示意和鞠躬致谢。虽然这时的《勇气重生》仅仅是背景音乐，但粉丝们还是意犹未尽的依旧喊起了Mix。</p><p>最后的最后是击掌会环节，成员们会在剧场的出口通道按照官网顺序（个人观察是名字拼音顺序）列队击掌。下面说下对各个成员的印象（包括头一天看得 Team H）：</p><h4>郝婉晴</h4><p>本次公演的意外收获，就是发现晴格格这个有趣的妹子。女朋友成了她的推。近看化妆比较浓。</p><h4>王璐</h4><p>我在Team HII中推，很热情</p><h4>小艾 陈观慧</h4><p>打头阵，对粉丝会主动互动。</p><h4>教练 陈思</h4><p>近看化妆比较浓。</p><h4>戴萌</h4><p>近看很好看，比照片好看。</p><h4>莫寒/许佳琪/赵晔</h4><p>队长、kiki和赵晔，三个人都在看某个热闹，没有怎么对上眼神 - -</p><h4>邱欣怡</h4><p>感觉很安静。</p><h4>袁雨桢</h4><p>给人很高兴的感觉。</p><h4>赵嘉敏</h4><p>很暖的微笑如同女神一般。</p><h4>张语格</h4><p>没有说话也没有表情，看我的眼神就像很害怕一样。</p><h3>公演视频</h3><p><a href="http://www.tudou.com/programs/view/9RfnLXQ8nVk"><a href="http://www.tudou.com/programs/view/9RfnLXQ8nVk">http://www.tudou.com/programs/view/9RfnLXQ8nVk</a></a></p><p>最后，送上福利 SNH48 Team NII 赵粤</p><p><img alt="SNH48 Team NII 赵粤" src="http://crispgm.com/image/snh48-zhaoyue.jpg" /></p>]]></content:encoded>
</item>
<item>
<title><![CDATA[[翻译]Airbnb的工程师文化]]></title>
<link>http://crispgm.com/page/engineering-culture-at-airbnb.html</link>
<guid isPermaLink="true">http://crispgm.com/page/engineering-culture-at-airbnb.html</guid>
<pubDate>Thu, 23 Apr 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h3>原文信息</h3><blockquote><p>Origin Post: <a href="http://nerds.airbnb.com/engineering-culture-airbnb/">Engineering Culture at Airbnb</a></p><p>By <strong>Mike Curtis</strong>, <a href="http://nerds.airbnb.com/author/mike_curtis/"><a href="http://nerds.airbnb.com/author/mike_curtis/">http://nerds.airbnb.com/author/mike_curtis/</a></a></p><p>Translated by <a href="http://crispgm.com"><strong>Crisp</strong></a></p></blockquote><h3>正文</h3><p>TODO</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Minimalism Period Tracker]]></title>
<link>http://crispgm.com/page/period-tracker-app.html</link>
<guid isPermaLink="true">http://crispgm.com/page/period-tracker-app.html</guid>
<pubDate>Fri, 27 Mar 2015 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h3>极简主义生理周期追踪app</h3><h4>背景</h4><p>为了当个相对体贴的男友，把<a href="http://yeyekooo.crispgm.com">女朋友</a>的生理周期追踪app装了起来，并且使用了各类国内外app。包括美柚、大姨吗、Clue和Glow。</p><p>国产缺点比较明显：</p><ol><li>无关功能极多，比如：很Low的社区</li><li>界面跟美图秀秀类似，粉色大行其道，毫无设计感</li><li>大姨吗支持给男朋友用，功能特别少</li></ol><p>国外的两款界面还是比较美观的，但也带有社区类，且没有“男朋友”模式。</p><h4>设计思路</h4><ol><li>极简主义风格设计，去除无用的功能</li><li>更好的信息传递方式</li></ol><h4>技术实现</h4><ul><li>客户端计划只会支持iOS，使用Swift实现</li><li>服务端使用golang在Linode上搭建</li><li>数据库采用NoSQL或MySQL</li></ul><h4>计划</h4><p>TODO</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[我喜欢的应用]]></title>
<link>http://crispgm.com/page/my-favorite-app.html</link>
<guid isPermaLink="true">http://crispgm.com/page/my-favorite-app.html</guid>
<pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h3>前言</h3><blockquote><p>子贡问为仁。子曰：“工欲善其事，必先利其器。居是邦也，事其大夫之贤者，友其士之仁者。”</p><p>——孔子（春秋）《论语·卫灵公》</p></blockquote><p>平时在工作生活中，特别注意对工具的选择和使用，无论是在PC、MAC、iPhone、iPad以至vim和shell中都是如此。探索和体验新的工具是平时的一个小爱好。</p><p>开始前，说几个也许有点扯的前提：</p><ul><li>极简主义者，不喜欢功能和UI特别复杂的app</li><li>喜欢反应快速的东西</li><li>略有强迫症，图标非常不搭的app有点受不了，所以同等情况下会选择图标好看的，实在不可替代就丢到Folder中 :)</li><li>有娱乐但没有游戏，本人爱玩游戏但对手机游戏完全无爱</li></ul><h3>更新记录</h3><p><strong>2015/02/28</strong>: 1. 由于iPad使用不多，移除了相关内容 2. 工具类增加WordBook</p><p><strong>2015/02/25</strong>: 1. 用欧陆词典替代了Bing词典 2. 增加奇点 3. 修复文本小bug</p><p><strong>2014/10/26</strong>: 合并“我喜欢的应用——iPhone篇”和“我喜欢的应用——Mac篇”为“我喜欢的应用”</p><p><strong>2014/08/10</strong>: 我喜欢的应用——Mac篇</p><p><strong>2014/05/29</strong>: 我喜欢的应用——iPhone篇</p><h3>正文</h3><h4><em>Development</em></h4><p><strong>Chrome</strong><br /><em>Windows, Mac, iPhone</em></p><p>速度快，自带同步，全平台支持，还可以不同类型终端之间访问书签和打开的页面。强大的插件支持，去优酷广告、JSON格式化显示和HTTP代理都很需要。</p><p><em>Why not Safari?</em></p><ol><li><p>对Chrome的插件有强需求</p></li><li><p>本人偶尔会开发Chrome插件</p></li><li><p>在Windows上肯定会选择Chrome</p></li><li>喜欢Chrome的设计</li></ol><p>ps: 打死不用加壳双核类浏览器！</p><p>[备选]Safari, Firefox</p><p><strong>Sublime Text</strong><br /><em>Windows, Mac</em></p><p>Sublime不是真的免费软件，但免费就可以使用全功能，只是会不定期提示你购买。当时刚回国，卡里有几十澳元，因为很喜欢这个软件，也就付费了。其实用的并不熟，大部分情况下只用到他自带的语法高亮、主题、语法提示、缩进调整和代码自动格式化相关的一些功能，这些功能都很nice。Sublime也支持"插件"(叫做package)。比如写Markdown时可以用MarkdownEditing即时预览。近期，我打算对Sublime的高级用法进行下探索，以后会单独发文介绍的。</p><p><em>ps</em>: Sublime有一个很吸引人的特性，就是多行编辑。不过，在我一次进行了一次选择了两万行再结尾加逗号的尝试后，发现这个功能在量大(其实两万真不能算量大)的时候完全没法用。</p><p><strong>Dash</strong><br /><em>Mac</em></p><p>API文档查询工具，收录了各种编程语言、框架和工具之类的API Documentation、User Manual和Cheat Sheet什么的。从此查文档不用现场Google了。</p><h4><em>Productivity</em></h4><p><strong>Apple Mail</strong><br /><em>Mac, iPhone</em></p><p>iPhone上的版本相对较好，偶尔会用，但并不是常用手机收邮件。Mac上的非常的不给力，主要有两点比较不能忍受：</p><ol><li>收取Gmail有时会导致进程hang死，为此还专门研究了<a href="http://crispgm.com/page/mac-mail.html">解决方法</a>。</li><li>加载和删除邮件操作非常慢，经常删个垃圾邮件删半天。</li></ol><p>不过Mac OSX Yosemite有更新，不知道会不会变好。</p><p><strong>Airmail</strong><br /><em>Mac</em></p><p>Airmail可以说是现在Mac最火的email client，购入后(￥12)只是收收生活上的邮件，所以其实也没有认真用。只能说体验挺好的，特别是跟Gmail配合的很好，具体优点有待更深层体会。目前还有些小毛病，比如126邮箱无法删除邮件。</p><p>ps: 邮箱这块其实我也没太想好，Windows上就outlook，Mac上用Airmail，iPhone上用Apple Mail，各有优势但也都没有特别满意。</p><p><strong>Wunderlist</strong><br /><em>Mac, iPhone, WebApp</em></p><p>德国出品，Wunder是德语Wonder的意思。简洁易用的TODO list类app，平时自己要做的事情都记在上面。UI设计不跟风，至今还不是扁平化但却仍旧觉得很美。勾选操作也很有快感！<del>缺点是iOS/Mac上同步极其不稳定。</del></p><p>2014.7.31 Wunderlist 3发布。这是一次大版本的升级，完成了技术重构和界面设计。Wunderlist终于变成了扁平风格。其他方面，主要的升级就是分享List和更简单的Collaboration。以及所谓的Real-time Sync，不过实测表明，iOS/Mac上同步能力提升的比较明显，不过还远远算不上实时。</p><p><strong>OneNote</strong><br /><em>Windows, Mac, iPhone</em></p><p>随着对Evernote使用的深入，其看似简单实则复杂的功能还有薄弱的排版和阅读效果，开始被我诟病。Microsoft OneNote作为Office的一部分，功能一上来就是"真复杂"。但优点是排版效果极佳，而且同样保持了简单易用。对于梳理资料而存在的话，完全可以取代Evernote。并且Nadella上台后，也推出了iOS和Mac版本，唯一缺点就是同步速度略慢。</p><p>[备选]曾经出现在列表中的Evernote</p><p><strong>百度云</strong><br /><em>Windows, iPhone, WebApp</em></p><p>2TB真心赞，离线下载可以省去用迅雷。之前有一个像素的解锁瑕疵，iPhone上至少已经修复了。况且目前还是内网用户，没有不用的理由。不过自从出现了色情内容“自动和谐”后，简直让人不爽。</p><p><strong>Dropbox</strong></p><p>对于本人来说，算是百度云的冷备，墙外数据安全性明显保障性强。但又毕竟在墙内会比较卡，而且Dropbox容量只有2G，所以用于备份一些重要数据，但是完全不够用！</p><p><strong>OneDrive</strong><br /><em>Windows, iPhone, WebApp</em></p><p>也就是曾经的SkyDrive。数据安全性强，容量比起Dropbox还是够用很多的，纯备份已经足够了。</p><p><strong>欧陆词典</strong><br /><em>Windows, iPhone</em></p><p>虽感觉不是很极简，但反应就是快。</p><p><strong>WordBook</strong><br /><em>iPhone</em></p><p>售价¥12最好的词典app（英英词典），响应快内容准，字体漂亮。</p><p>[备选]必应词典, Google Translate</p><h4><em>Reading</em></h4><p><strong>Reeder</strong><br /><em>Mac, iPhone</em></p><p>售价¥30，绝对物有所值，免费可以选Feedly，但收费的话我推荐Reeder。Feedly不挂VPN实在会经常刷不出来，挂了VPN速度也不快。反观Reeder可以直接登录Feedly帐号，速度还飞快，UI设计也更有阅读质感。值得一提的是，Reeder的share功能反应特别快，分享到Pocket一点就行，完全无滞后感。</p><p><strong>Pocket</strong><br /><em>Mac, iPhone</em></p><p>传说中的Read it later，Reeder中的RSS源比较多，希望深度阅读的认为，可以从Reeder中share到Pocket。从阅读体验来说，其实Reeder更好些，但Pocket也逊色的不多。最近刚出了Premium版，就是太贵了点。可以离线存储文章，从此不用再担心出现死链了。</p><p><em>PS:</em> 真的书籍就不在手机或平板上阅读了，有Kindle和实体书。</p><p><strong>Instapaper</strong><br /><em>iPhone</em></p><p>Instapaper同Pocket是宿敌，定位相似，价格¥25。个人体验是Instapaper更专注阅读纯文本，对于文本的排版比Pocket略好。跟Reeder的设计风格相似，颇为神似，两者配合起来很有感觉。但它的文章抓取速度比Pocket慢太多了，不知是不是国内网络的原因。综合的来说，价格算是值得，但我想Pocket其实已经够了。</p><h4><em>Social</em></h4><p><strong>微信 WeChat</strong><br /><em>Windows, Mac, iPhone</em></p><p>主要沟通工具。即使张晓龙说不想让微信做的太重，但它的确已经超贵，已经很臃肿了，希望能把游戏和购物入口给删了，我不会进去的。庆幸的是，我的好友里面转脑残文章的几乎没有。</p><p>Mac版微信是Native Client，不过功能上跟网页版保持一致。需要手机扫码才能登陆，只支持正常的聊天功能，不支持朋友圈等扩展功能。</p><p>值得一提的是，微信是国内少数开发iPhone和iPad合一版app的公司。</p><p><strong>QQ</strong><br /><em>Windows, Mac, iPhone</em></p><p>QQ这块得分开说，因为不同版本的QQ简直不是一个软件。</p><ul><li><p>Windows就是从小用到大的那款QQ。</p></li><li><p>Mac原先版本的Mac qq就是一废品，而更新到现在的版本，绝对是一款好产品了。界面极简，设计也是Mac风格，不一样的qq体验。</p></li><li>iPhone基本功能的用户体验很好，但极其臃肿，功能很杂。腾讯的标签页设计的很合理，额外的功能同基础功能，有一种眼不见心不烦的意思。之前的版本是一种比较白静的UI设计，看着挺舒服。不过，新版UI一出，完全丑得不能忍，遂删除。</li></ul><p><strong>VVebo</strong><br /><em>iPhone</em></p><p>官方微博客户端功能好多，体积好大，完全用不上。买了WeicoPro但是近期的版本质量好差很容易crash，而且页面排版也不是很满意。VVebo简洁功能够用，阅读感觉好！</p><p>近期，由于微博的限制，一些功能被阉割。虽说鄙视微博这种行为，不过对于VVebo来说刚好被迫砍掉了一些我不太喜欢的功能，也是蛮开心的。</p><p><strong>奇点</strong><br /><em>iPhone</em></p><p>更简单的微博客户端，只有基本功能，如果更美观些（特别是图标）、阅读体验更好些，那就完美了。</p><p><strong>Instragram</strong><br /><em>iPhone</em></p><p>图片社交软件，可以围观各种文艺妹子，就是加载速度什么的略慢。不过后来一想，能看到就不错了，这货用的是<del>facebook</del>的CDN！</p><h4>Music &amp; Video</h4><p><strong>Foobar 2000</strong><br /><em>Windows</em></p><p>简单、音质好、支持插件、初始界面丑陋……Foobar 2000有很多自己的标签，并得到了一部分注重音质喜欢折腾的用户的青睐。但它的特点使它注定不会特别大众化，一般的用户听不出来音质的区别，一般的用户一进入初始界面可能就因为难看而失去兴趣，一般的用户可不会自己配插件配UI……但这不正是发烧友们和Geek们所爱好的东西？因此，我爱Foobar 2000。</p><p><strong>网易云音乐</strong><br /><em>Windows, Mac, iPhone</em></p><p>用户体验好，歌曲库资源多。不过社交感做得太强了，但我认识的好友都不用它“社交”。还有就是，默认主题比较红火，喜欢能推出一款冷色调主题。</p><p><strong>iTunes Internet Radio</strong><br /><em>Mac</em></p><p>iTunes真心坑货，但其自带的iTunes Internet Radio却是精品。里面分类齐全，速度也稳定。Classical Music频道是我最爱。</p><p><strong>VLC</strong><br /><em>Mac</em></p><p>Mac上国产万能型播放器还未大规模登陆，VLC作为一款开源播放器能够满足播放QuickTime不支持格式的需求。</p><p>在Windows上，替代品比较多，用不用VLC不是很有所谓。</p><h4><em>Finance</em></h4><p><strong>支付宝</strong><br /><em>iPhone</em></p><p>很实用的app，移动支付必备，AA也很方便，而且还可以当作支付Token用。</p><p><strong>招商银行</strong><br /><em>iPhone</em></p><p>其中装了两个，一个是招商银行客户端而另一个是掌上生活。前者主要功能是查询和管理工资卡，后者是处理信用卡事宜。当然，作为用户体验最好的国内银行之一，招商银行的客户端在银行界那也是没得说！</p><h4>Tools</h4><p><strong>Bing</strong><br /><em>iPhone</em></p><p>由于Google在不翻墙时已经完全无法使用，就下了个Bing搜索试试。同必应词典优点一致。</p><p><strong>Apple Maps</strong><br /><em>iPhone</em></p><p>虽说刚出来时被人吐槽，不过我用的时候已经很带感了。不喜欢那些功能复杂的地图，集成了寻路、打车和附近商家之类的功能。只需要一个准确详细的地图的话，我想它已经足够好。</p><p><strong>Apple Weather</strong><br /><em>iPhone</em></p><p>简单实用的天气app，完全可以满足大多数日常需求。</p><p>[备选]Yahoo Weather, Accu Weather, Weather Dial</p><p><strong>Air Quality</strong><br /><em>iPhone</em></p><p>由于天气类app中没有选择国产，所以需要用它查看空气污染指数。新版支持iOS8的Widget，因此也不需要打开app看到里面的广告了。</p><p><strong>Clover</strong><br /><em>Windows</em></p><p>把Windows的资源管理器，用Chrome风格标签页显示，甚至可以使用Chrome的主题文件。</p><p><strong>Language Switcher</strong><br /><em>Mac</em></p><p>作用很简单，可以以单个app为纬度，设置它的locale.我的Mac设置的是英文，所以大多国际化的程序会默认把界面设成英文界面，并且不能调整。但有些软件<del>Mac QQ</del>英死早，就可以用它切换回中文而不是把Mac都换成中文。</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Mac截图修改保存路径]]></title>
<link>http://crispgm.com/page/mac-screenshot-path.html</link>
<guid isPermaLink="true">http://crispgm.com/page/mac-screenshot-path.html</guid>
<pubDate>Sat, 20 Sep 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>Mac OSX 提供<a href="http://support.apple.com/kb/HT1343?viewlocale=zh_CN">快捷键</a>进行截图，它们分别是：</p><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>Command-Shift-3</td><td>将屏幕捕捉到文件</td></tr><tr><td>Command-Shift-Control-3</td><td>将屏幕内容捕捉到剪贴板</td></tr><tr><td>Command-Shift-4</td><td>将所选屏幕内容捕捉到一个文件，或按空格键仅捕捉一个窗口</td></tr><tr><td>Command-Shift-Control-4</td><td>将所选屏幕内容捕捉到剪贴板，或按空格键仅捕捉一个窗口</td></tr></tbody></table><p>功能非常赞，用起来唯一不方便的就是文件会自动保存到桌面。我们可以通过下面的方法，设置默认的截图保存位置。</p><pre><code># /path/to/screenshot 是要设置的路径  defaults write com.apple.screencapture location /path/to/screenshot  killall SystemUIServer</code></pre><p>还有开发者做了一个Mac App实现此功能，有兴趣的可以搜索下。不过，我想对于geek来说，这种方法已经足够 :)</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[MySQL更新多条记录的不同值]]></title>
<link>http://crispgm.com/page/mysql-update-multirows.html</link>
<guid isPermaLink="true">http://crispgm.com/page/mysql-update-multirows.html</guid>
<pubDate>Fri, 12 Sep 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>MySQL语句使用过程中，会用到一些多行更新的场景。比较常见的是，把多行都更新成同一个值。如：</p><pre><code class="language-sql">UPDATE table_name  SET column_value=1  WHERE column_id IN (1,2,3);</code></pre><p>如果更新多行数据，且值是不同的，往往会使用for循环进行更新。如：</p><pre><code class="language-php">foreach ($data_list as $item) {      $sql = "UPDATE table_name SET column={$item['value']} WHERE column={$item['id']}";      $ret = mysql_query($sql);      if ($ret === false) {          //...    }  }  </code></pre><p>这样写网络交互次数比较多，可能会导致性能问题，看起来也不优雅。那能否一条SQL搞定呢？答案是肯定的。</p><pre><code class="language-sql">UPDATE table_name  SET column_value = CASE column_id      WHEN 1 THEN 0      WHEN 2 THEN 1      WHEN 3 THEN 2  WHERE column_id IN(1,2,3);</code></pre><p>同理，也可以使用此方法设置多行多个值。</p><pre><code class="language-sql">UPDATE table_name  SET column_value = CASE column_id      WHEN 1 THEN 0      WHEN 2 THEN 1      WHEN 3 THEN 2,  SET column_desc = CASE column_id      WHEN 1 THEN 'test 1'    WHEN 2 THEN 'test 2'    WHEN 3 THEN 'test 3'WHERE column_id IN(1,2,3);</code></pre><p>END.</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[[翻译]PHP: int(强制转换) vs. intval()]]></title>
<link>http://crispgm.com/page/php-casting-vs-intval.html</link>
<guid isPermaLink="true">http://crispgm.com/page/php-casting-vs-intval.html</guid>
<pubDate>Wed, 03 Sep 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h3>原文信息</h3><p>Original Page: </p><blockquote><p><a href="http://hakre.wordpress.com/2010/05/13/php-casting-vs-intval">PHP: Casting vs. intval()</a></p><p>By <strong>Hakre</strong>, <a href="http://hakre.wordpress.com">hakre.wordpress.com</a>  </p><p>May 13th, 2010</p><p>Translated by <a href="http://crispgm.com">Crisp</a></p></blockquote><h3>正文</h3><p>在PHP中，使用<code>(int)$var</code>方式进行类型转换比使用<code>intval($var)</code>函数方式快400%到650%。</p><h4>运行测试</h4><h4>(int)$val vs. intval($val) 速度对比[系统 #1]</h4><table><thead><tr><th>#</th><th>输入</th><th>(INT)$val</th><th>INTVAL($val)</th><th>比率</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 0.068180</td><td>/ 0.448819</td><td>658%</td></tr><tr><td>#1</td><td>-42</td><td>: 0.067972</td><td>/ 0.448907</td><td>660%</td></tr><tr><td>#2</td><td>4.2</td><td>: 0.072348</td><td>/ 0.450288</td><td>622%</td></tr><tr><td>#3</td><td>'42'</td><td>: 0.087305</td><td>/ 0.469350</td><td>537%</td></tr><tr><td>#4</td><td>'+42'</td><td>: 0.087590</td><td>/ 0.471153</td><td>537%</td></tr><tr><td>#5</td><td>'-42'</td><td>: 0.089154</td><td>/ 0.469826</td><td>526%</td></tr><tr><td>#6</td><td>34</td><td>: 0.068234</td><td>/ 0.451035</td><td>661%</td></tr><tr><td>#7</td><td>'042'</td><td>: 0.089344</td><td>/ 0.470391</td><td>526%</td></tr><tr><td>#8</td><td>0x1A</td><td>: 0.072989</td><td>/ 0.451909</td><td>619%</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 0.088196</td><td>/ 0.469347</td><td>532%</td></tr><tr><td>#10</td><td>26</td><td>: 0.068378</td><td>/ 0.449884</td><td>657%</td></tr><tr><td>#11</td><td>42000000</td><td>: 0.068770</td><td>/ 0.449416</td><td>653%</td></tr><tr><td>#12</td><td>2147483647</td><td>: 0.068927</td><td>/ 0.448028</td><td>650%</td></tr><tr><td>#13</td><td>2147483648</td><td>: 0.072599</td><td>/ 0.450618</td><td>620%</td></tr><tr><td>#14</td><td>4.2E+20</td><td>: 0.086305</td><td>/ 0.467347</td><td>541%</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 0.102120</td><td>/ 0.484245</td><td>474%</td></tr><tr><td>#16</td><td>array()</td><td>: 0.092310</td><td>/ 0.472185</td><td>511%</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 0.112644</td><td>/ 0.494482</td><td>438%</td></tr></tbody></table><h4>(int)$val vs. intval($val) 速度对比[系统 #2]</h4><table><thead><tr><th>#</th><th>输入</th><th>(INT)$val</th><th>INTVAL($val)</th><th>比率</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 0.045576</td><td>/ 0.194759</td><td>427%</td></tr><tr><td>#1</td><td>-42</td><td>: 0.042457</td><td>/ 0.194273</td><td>457%</td></tr><tr><td>#2</td><td>4.2</td><td>: 0.047853</td><td>/ 0.196049</td><td>409%</td></tr><tr><td>#3</td><td>'42'</td><td>: 0.055792</td><td>/ 0.209531</td><td>375%</td></tr><tr><td>#4</td><td>'+42'</td><td>: 0.055158</td><td>/ 0.208236</td><td>377%</td></tr><tr><td>#5</td><td>'-42'</td><td>: 0.056604</td><td>/ 0.209486</td><td>370%</td></tr><tr><td>#6</td><td>34</td><td>: 0.042580</td><td>/ 0.194606</td><td>457%</td></tr><tr><td>#7</td><td>'042'</td><td>: 0.056834</td><td>/ 0.209276</td><td>368%</td></tr><tr><td>#8</td><td>0x1A</td><td>: 0.045320</td><td>/ 0.196626</td><td>433%</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 0.054923</td><td>/ 0.209295</td><td>381%</td></tr><tr><td>#10</td><td>26</td><td>: 0.042582</td><td>/ 0.195295</td><td>458%</td></tr><tr><td>#11</td><td>42000000</td><td>: 0.042673</td><td>/ 0.194469</td><td>455%</td></tr><tr><td>#12</td><td>2147483647</td><td>: 0.042560</td><td>/ 0.194363</td><td>456%</td></tr><tr><td>#13</td><td>2147483648</td><td>: 0.045553</td><td>/ 0.197149</td><td>432%</td></tr><tr><td>#14</td><td>4.2E+20</td><td>: 0.054069</td><td>/ 0.206131</td><td>381%</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 0.066170</td><td>/ 0.218996</td><td>330%</td></tr><tr><td>#16</td><td>array()</td><td>: 0.057587</td><td>/ 0.210010</td><td>364%</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 0.071908</td><td>/ 0.224338</td><td>311%</td></tr></tbody></table><p>这组测试每个项目进行了100000次循环。两个测试都在windows上运行。系统#1使用的是PHP 5.2.8，而系统#2使用PHP 5.2.9并且有更高的CPU、内存和硬盘速度。</p><h4>intval()和int的结果对比</h4><p>为了证明intval()和int得到同样的值，我进行了另一个测试：</p><table><thead><tr><th>#</th><th>输入</th><th>期待结果</th><th>INTVAL($val)</th><th>(INT)$val</th><th>结果</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#1</td><td>-42</td><td>: -42</td><td>/ -42</td><td>/ -42</td><td>通过</td></tr><tr><td>#2</td><td>4.2</td><td>: 4</td><td>/ 4</td><td>/ 4</td><td>通过</td></tr><tr><td>#3</td><td>'42'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#4</td><td>'+42'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#5</td><td>'-42'</td><td>: -42</td><td>/ -42</td><td>/ -42</td><td>通过</td></tr><tr><td>#6</td><td>34</td><td>: 34</td><td>/ 34</td><td>/ 34</td><td>通过</td></tr><tr><td>#7</td><td>'042'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#8</td><td>0x1A</td><td>: 1410065408</td><td>/ 1410065408</td><td>/ 1410065408</td><td>通过</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 1</td><td>/ 1</td><td>/ 1</td><td>通过</td></tr><tr><td>#10</td><td>26</td><td>: 26</td><td>/ 26</td><td>/ 26</td><td>通过</td></tr><tr><td>#11</td><td>42000000</td><td>: 42000000</td><td>/ 42000000</td><td>/ 42000000</td><td>通过</td></tr><tr><td>#12</td><td>2147483647</td><td>: 2147483647</td><td>/ 2147483647</td><td>/ 2147483647</td><td>通过</td></tr><tr><td>#13</td><td>2147483648</td><td>: -2147483648</td><td>/ -2147483648</td><td>/ -2147483648</td><td>通过</td></tr><tr><td>#14</td><td>4.2E+20</td><td>: 0</td><td>/ 0</td><td>/ 0</td><td>通过</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 2147483647</td><td>/ 2147483647</td><td>/ 2147483647</td><td>通过</td></tr><tr><td>#16</td><td>array()</td><td>: 0</td><td>/ 0</td><td>/ 0</td><td>通过</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 1</td><td>/ 1</td><td>/ 1</td><td>通过</td></tr></tbody></table><h4>settype()和intval()速度对比[系统 #1]</h4><p>用于对比，我还进行了settype()和intval()速度测试。两者的差别并不大，但我不确定这个测试是否合理，因为并不容易直接对这个函数进行测试。既然已经跑了这个测试，我认为值得把结果同前面的数据一起分享出来。</p><table><thead><tr><th>#</th><th>输入</th><th>SETTYPE($val)</th><th>INTVAL($val)</th><th>比率</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 0.533901</td><td>/ 0.477519</td><td>89%</td></tr><tr><td>#1</td><td>-42</td><td>: 0.533729</td><td>/ 0.478345</td><td>89%</td></tr><tr><td>#2</td><td>4.2</td><td>: 0.536932</td><td>/ 0.480030</td><td>89%</td></tr><tr><td>#3</td><td>'42'</td><td>: 0.547209</td><td>/ 0.503447</td><td>92%</td></tr><tr><td>#4</td><td>'+42'</td><td>: 0.553214</td><td>/ 0.501764</td><td>90%</td></tr><tr><td>#5</td><td>'-42'</td><td>: 0.551974</td><td>/ 0.503403</td><td>91%</td></tr><tr><td>#6</td><td>34</td><td>: 0.532637</td><td>/ 0.478039</td><td>89%</td></tr><tr><td>#7</td><td>'042'</td><td>: 0.552709</td><td>/ 0.505796</td><td>91%</td></tr><tr><td>#8</td><td>0x1A</td><td>: 0.536864</td><td>/ 0.481672</td><td>89%</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 0.550352</td><td>/ 0.506748</td><td>92%</td></tr><tr><td>#10</td><td>26</td><td>: 0.537672</td><td>/ 0.478947</td><td>89%</td></tr><tr><td>#11</td><td>42000000</td><td>: 0.536360</td><td>/ 0.478373</td><td>89%</td></tr><tr><td>#12</td><td>2147483647</td><td>: 0.541348</td><td>/ 0.490556</td><td>90%</td></tr><tr><td>#13</td><td>2147483648</td><td>: 0.539018</td><td>/ 0.486669</td><td>90%</td></tr><tr><td>#14</td><td>4.2E+20</td><td>: 0.554357</td><td>/ 0.499877</td><td>90%</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 0.566189</td><td>/ 0.522929</td><td>92%</td></tr><tr><td>#16</td><td>array()</td><td>: 0.549919</td><td>/ 0.505488</td><td>91%</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 0.578893</td><td>/ 0.527864</td><td>91%</td></tr></tbody></table><p>更新：</p><p>我进行了一些关于0 + $var的测试，因为这也是一种获得数字的方式。这种方法没那么"类型安全"，不过作为对比，我认为有必要一起列出来：</p><h4>intval()和0 + $var对比结果</h4><table><thead><tr><th>#</th><th>输入</th><th>期待结果</th><th>INTVAL($val)</th><th>0+$VAR</th><th>结果</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#1</td><td>-42</td><td>: -42</td><td>/ -42</td><td>/ -42</td><td>通过</td></tr><tr><td>#2</td><td>4.2</td><td>: 4</td><td>/ 4</td><td>/ 4.2</td><td>不通过</td></tr><tr><td>#3</td><td>'42'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#4</td><td>'+42'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#5</td><td>'-42'</td><td>: -42</td><td>/ -42</td><td>/ -42</td><td>通过</td></tr><tr><td>#6</td><td>042</td><td>: 34</td><td>/ 34</td><td>/ 34</td><td>通过</td></tr><tr><td>#7</td><td>'042'</td><td>: 42</td><td>/ 42</td><td>/ 42</td><td>通过</td></tr><tr><td>#8</td><td>1e10</td><td>: 1410065408</td><td>/ 1410065408</td><td>/ 10000000000</td><td>不通过</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 1</td><td>/ 1</td><td>/ 10000000000</td><td>不通过</td></tr><tr><td>#10</td><td>0x1A</td><td>: 26</td><td>/ 26</td><td>/ 26</td><td>通过</td></tr><tr><td>#11</td><td>42000000</td><td>: 42000000</td><td>/ 42000000</td><td>/ 42000000</td><td>通过</td></tr><tr><td>#12</td><td>2147483647</td><td>: 2147483647</td><td>/ 2147483647</td><td>/ 2147483647</td><td>通过</td></tr><tr><td>#13</td><td>2147483648</td><td>: -2147483648</td><td>/ -2147483648</td><td>/ 2147483648</td><td>不通过</td></tr><tr><td>#14</td><td>420000000000000000000</td><td>: 0</td><td>/ 0</td><td>/ 4.2E+20</td><td>不通过</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 2147483647</td><td>/ 2147483647</td><td>/ 4.2E+20</td><td>不通过</td></tr><tr><td>#16</td><td>array()</td><td>: 0</td><td>/ 0</td><td>/ 报错</td><td>跳过</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 1</td><td>/ 1</td><td>/ 报错</td><td>跳过</td></tr></tbody></table><h4>(int)$val和0 + $var速度测试[系统 #1]</h4><table><thead><tr><th>#</th><th>输入</th><th>(INT)$val</th><th>0+$val</th><th>比率</th></tr></thead><tbody><tr><td>#0</td><td>42</td><td>: 0.068794</td><td>/ 0.069249</td><td>100%</td></tr><tr><td>#1</td><td>-42</td><td>: 0.074688</td><td>/ 0.069155</td><td>92%</td></tr><tr><td>#2</td><td>4.2</td><td>: 0.073207</td><td>/ 0.069257</td><td>94%*</td></tr><tr><td>#3</td><td>'42'</td><td>: 0.086568</td><td>/ 0.076261</td><td>88%</td></tr><tr><td>#4</td><td>'+42'</td><td>: 0.087230</td><td>/ 0.080867</td><td>92%</td></tr><tr><td>#5</td><td>'-42'</td><td>: 0.090189</td><td>/ 0.075923</td><td>84%</td></tr><tr><td>#6</td><td>042</td><td>: 0.069072</td><td>/ 0.069243</td><td>100%</td></tr><tr><td>#7</td><td>'042'</td><td>: 0.088535</td><td>/ 0.082137</td><td>92%</td></tr><tr><td>#8</td><td>1e10</td><td>: 0.072930</td><td>/ 0.069512</td><td>95%*</td></tr><tr><td>#9</td><td>'1e10'</td><td>: 0.086942</td><td>/ 0.082032</td><td>94%</td></tr><tr><td>#10</td><td>0x1A</td><td>: 0.068921</td><td>/ 0.069365</td><td>100%</td></tr><tr><td>#11</td><td>42000000</td><td>: 0.069203</td><td>/ 0.069415</td><td>100%</td></tr><tr><td>#12</td><td>2147483647</td><td>: 0.069109</td><td>/ 0.069386</td><td>100%</td></tr><tr><td>#13</td><td>2147483648</td><td>: 0.073053</td><td>/ 0.069277</td><td>94%*</td></tr><tr><td>#14</td><td>420000000000000000000</td><td>: 0.092318</td><td>/ 0.069463</td><td>75%*</td></tr><tr><td>#15</td><td>'420000000000000000000'</td><td>: 0.105735</td><td>/ 0.211617</td><td>200%*</td></tr><tr><td>#16</td><td>array()</td><td>: 跳过</td></tr><tr><td>#17</td><td>array('foo', 'bar')</td><td>: 跳过</td></tr></tbody></table><p><em>*: 在上一个测试中，结果未通过</em></p><h4>测试结论</h4><p>使用(int)类型转换，便捷而且没有负面效果。事实上，它在速度快的同时，还和intval()函数有完全一样的结果。两者甚至还会有同样的warning信息。</p><h4>扩展阅读</h4><ul><li><a href="http://stackoverflow.com/questions/1912599/php-is-there-any-particular-difference-between-intval-and-int">PHP: Is there any particular difference between intval and (int)?</a>  </li><li><a href="http://stackoverflow.com/questions/239136/fastest-way-to-convert-string-to-integer-in-php">Fastest way to convert string to integer in PHP</a></li></ul><h4>深层原因</h4><p>对于作者的结论，网友Joseph Scott对OPCODE进行了分析，解释了其深层原因。</p><h2>intval()  </h2><pre><code>0 ASSIGN  1 SEND_VAR  2 DO_FCALL  3 ASSIGN  4 RETURN  5* ZEND_HANDLE_EXCEPTION</code></pre><h2>int  </h2><pre><code>0 ASSIGN  1 CAST  2 ASSIGN  3 RETURN  4* ZEND_HANDLE_EXCEPTION</code></pre><h4>最终结论</h4><ol><li>int比intval()快3-6倍。  </li><li>SEND_VAR和DO_FCALL操作，是导致int比intval()快很多的原因。</li></ol>]]></content:encoded>
</item>
<item>
<title><![CDATA[[转]看月亮和看星星]]></title>
<link>http://crispgm.com/page/moon-and-stars.html</link>
<guid isPermaLink="true">http://crispgm.com/page/moon-and-stars.html</guid>
<pubDate>Sun, 17 Aug 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h5>Copyright &copy; 芒果派</h5><h5>转自 <a href="http://atomatopie.tumblr.com/post/94999424136"><a href="http://atomatopie.tumblr.com/post/94999424136">http://atomatopie.tumblr.com/post/94999424136</a></a></h5><p>回想和小琳琳在一起的时候，我们在无意间做了很多都是是彼此的第一次的事情。</p><p>比如有一次，我们吃完晚饭去gym锻炼，走到campus square的时候，天上就开始飘起了雪花，生长在大湖建的小琳琳从来没看过下雪，当时惊喜地像个小孩，印象里，他好像特别兴奋地说，这是初雪啊，今年的初雪啊，我真没想到这辈子第一次看雪，竟然是跟小罗罗一起看的啊！我就在一旁吃吃地笑，嘲笑他没见过世面。除了看雪，我们还一起去看过月亮，看过星星，这个也就是今天要说的故事。</p><p>有一天晚上，我们从实验室出来，当时正好台风sandy扫荡过屌丝镇，惠风和畅，天朗气清。突然，小琳琳指着天上的月亮说，你看月晕。我第一次听到这个名词，似懂非懂地看着月亮，那月亮很亮，清澈的玉盘被蒙上羞涩的棉纱，周围出现了一个银白色的光环。我问小琳琳，月晕是什么啊？小琳琳说，月光通过云层中的冰晶时，经折射而成的光在月亮周围形成光圈，有时也呈银白色光圈，这些‘晕’其实就是卷层云，我们上科学课的时候也说到，冷空气遇到暖和的湿空气，就形成要下雨的云，这时，天上很冷，水滴都冻成了六角形的冰晶，当晚上的月光照射这些冰晶时，就形成了月晕。其实，小琳琳当时也解释了一大堆，后来我全给忘了，以上的释义全部来源于百度百科。我们就一边看着月亮，一边走回家，在家门口还给月晕拍了照片，结果因为像素太渣，拍下来的照片像是黑夜里的一盏白炽灯。我和小琳琳都觉得很可惜，于是我俩决定要买一台单反，下次再看到月晕的时候就可以拍下来。现在虽然有了单反，但这一拍星星拍月亮的计划却永远地流产了，也不知道我这辈子还能不能再看见一次月晕。</p><p>还有一次，也是冬天，我们从实验室出来，小琳琳说，今天天上星星好多啊，你看，猎户座！我就傻乎乎地问他哪个是猎户座。小琳琳嘲笑我说，猎户座是最好找的星座，因为有三颗小星星连成一条线，还有两颗大星星在下面组成了一个梯形。于是在北斗七星之后，我终于又认识了一个星座。看完猎户座，我还觉得不过瘾，朝小琳琳瞎嚷嚷说，好久没坐车了，我们开着车去山顶看吧。小琳琳想了一会说，你是萌萌萌小罗罗吗，那我们去mountain top campus看星星吧。我说，好啊好啊，正好可以试试star walk准不准。</p><p>小琳琳开着他的煤矿老板专用小雅阁，沿着盘山公路开到了山顶。天气实在太冷，我哆哆嗦嗦地打开了star walk准备校准。就在这时，小琳琳向我展示了他高逼格的天文知识，他指着我们头顶的一颗星星说，这颗最亮的星星是天鹅座β星，英文叫Albireo，它距离地球385光年，我们现在用裸眼观测天鹅座β是一颗单星。在那一瞬间，我对小琳琳真的崇拜地一塌糊涂，由衷地惊呆了。但小琳琳继续很冷静地向我解说，但事实上，借助天文望远镜观察，通常所谓的天鹅座β实际上是颗双星，一颗是黄色的，另一个是蓝色的，从地球观测相距34弧秒，因为两颗子星的颜色正好相反，所以这是全天颜色差距最显著的双星，过去，人们认为它们仅仅是光学双星，两者之间并没像真正的双星系统那样有公共点做轨道运行，无论如何，尽管两者间的距离遥远，但现在一般都认为它们是真正的双星。我听得云里雾里，但实在是被小琳琳这满腹天文经纶佩服地五体投地，只是嘿嘿嘿地笑了几下，认真地看着天鹅座。突然，一个闪着绿光、蓝光、黄光的飞行体快速移动，“小琳琳，那是飞碟吗？”我几乎是喊了出来！“你是超级幸运星小罗罗吗？”“嗯？什么？那是飞碟还是啥！”我还是不敢相信自己的眼睛，小琳琳却笑着说，“那颗是行星啊！超级幸运小罗罗，我们刚刚目击了颗小行星啊，全世界每年只有约250个人才能看到呢！”我看着小琳琳，傻傻地说不出话来，只听得小琳琳说，“因为太空各种旋转，总会有新的小行星误入能被地球观测到的区域！”说完，他跑去车里拿出了笔，在纸上写起了各路公式，我不明所以地看着他，不知道他要做什么。只见小琳琳图了一会，突然开口说，“算好啦！”“什么？”小琳琳指着小行星划过的天边说，今晚的这颗小行星就是我们一起新发现的，我给他命名为2014LL 南瓜派星，因为你做的南瓜派是世界上最好吃的南瓜派。我哈哈哈哈大笑，“小琳琳，你还能再土一点吗？”他却一本正经地说，“这是实话，我最喜欢芒果派做的南瓜派。”我内心好是欢喜，只顾抿着嘴傻笑。小琳琳继续说，“刚我算了，这颗南瓜派星，哈哈，我也觉得这个名字好好笑，这颗南瓜派星的周期是83年，83年以后我们还要一起看！”“哈哈哈”我心里又是高兴，又是感动，却还是傻不拉几地煞风景地问了句，“83年以后还不知道能不能看见呢！”“你是超级笨笨小罗罗吗？”小琳琳拍着我头反问道，“那就代表要永远在一起拉！”甜言蜜语听得我又惊又喜，一冲动就bia叽一下在小琳琳脸上亲了一口。</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Mac OSX 10.9 Mavericks清除DNS缓存]]></title>
<link>http://crispgm.com/page/mac-dns-flush.html</link>
<guid isPermaLink="true">http://crispgm.com/page/mac-dns-flush.html</guid>
<pubDate>Sat, 03 May 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>不说废话，正确的清除DNS缓存方式为：</p><pre><code>dscacheutil -flushcachesudo killall -HUP mDNSResponder</code></pre>]]></content:encoded>
</item>
<item>
<title><![CDATA[YouCompleteMe Installation Guide on Mac]]></title>
<link>http://crispgm.com/page/vim-youcompleteme.html</link>
<guid isPermaLink="true">http://crispgm.com/page/vim-youcompleteme.html</guid>
<pubDate>Sun, 20 Apr 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h4>What is YouCompleteMe</h4><p><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> 是一个vim插件，简称为ycm，支持基于语义的代码补全和代码语法检查功能。</p><p>常用的补全插件如ctags和AutoComplPop等是基于文本的，类似于搜索时的suggest功能。不过，前者是事先扫描文本生成tags文件，后者是对当前打开的文件内容进行扫描。如果tags或者打开的文件重不存在的内容，那就无法进行补全。此外，这种补全是基于单词的，所以补全的提示可能是变量、关键字、注释甚至是字符串里的内容。</p><p>所谓的基于语义的代码补全，简单的说就是通过对代码的语义进行分析。举个例子，对于对象或结构操作时，在输入.之后ycm可以补全提示对象的成员变量和成员函数等。一般的成熟IDE如Visual Studio和Eclipse都具有这种能力。</p><p>目前ycm支持5种程序语言:C/C++/Objective-C(基于clang)，Python(基于<a href="https://github.com/davidhalter/jedi">Jedi</a>)和C# (基于<a href="https://github.com/nosami/OmniSharpServer">OmniSharp</a>)。</p><p>至于其他语言，ycm会调用vim omnifunc来匹配，因此不是很有必要使用ycm。</p><p>ycm虽然功能十分强大，不过编译安装较为复杂，本文基于Mac OSX 10.9 Mavericks介绍一下如何安装成功爽上ycm。</p><h4>Dependencies</h4><ul><li><p>vim 7.3.584+</p></li><li><p>cmake，建议使用homebrew安装</p></li><li><p><a href="https://github.com/gmarik/Vundle.vim">vundle</a>，安装起来很容易，按照github上面的介绍来就行</p></li><li>Python 2.6+</li></ul><h4>Installation</h4><p>安装完vundle后，修改.vimrc</p><pre><code>vim ~/.vimrc</code></pre><p>加入</p><pre><code>Bundle 'Valloric/YouCompleteMe'</code></pre><p>保存重启vim后<em>:BundleInstall</em>，就开始安装了。这个安装并没有包括编译，只是把ycm的vim、python以及C++代码下载下来。</p><p>然后进入YouCompleteMe的目录开始编译，<em>--clang-completer</em>是启用C family languages提示(为的就是这功能，果断要加上)</p><pre><code>cd ~/.vim/bundle/YouCompleteMe./install.sh --clang-completer</code></pre><p>到此，插件已经编译完毕，基本上可以使用了。不过此时进入编辑cpp文件，发现代码提示怎么还是基于omnifunc呢？原来缺少了一条配置。</p><h4>Configuration</h4><p>编辑~/.vimrc文件，加入</p><pre><code>let g:ycm_global_ycm_extra_conf = '/Users/crisp/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'</code></pre><p>重新进入vim，已经可以正常对代码进行提示。</p><h4>In The End</h4><p><img alt="" src="http://crispgm.github.io/image/ycm-demo.png" /></p><p>Congrats to myself! </p><p>ycm提示出了对象md的成员函数(f标识)和成员变量(m标识)等信息。</p><p>对于Mac来说，由于作者(据我观察)就使用Mac，而且Mac OSX版本比较统一，因此按照作者的Mac OSX Super-quick installation步骤基本可以顺利安装。</p><p>不过在其他Linux上可就不一样了，我在公司的开发机上编译clang-completer就一直没成功，等到有空的时候再去折腾下。</p><p>Good luck to everyone!</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Fiddler网络调试工具]]></title>
<link>http://crispgm.com/page/fiddler-proxy.html</link>
<guid isPermaLink="true">http://crispgm.com/page/fiddler-proxy.html</guid>
<pubDate>Fri, 21 Mar 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<h4>什么是Fiddler</h4><p>Fiddler官方给Fiddler的描述语是Web Debugging Proxy，也就是web调试代理工具。</p><p>主要功能有：</p><ul><li><p>截取HTTP/HTTPS请求</p></li><li><p>修改Session</p></li><li><p>网络调试</p></li><li><p>安全测试</p></li><li>性能测试</li></ul><p>本文，主要讨论前三项功能的使用方法，包括Fiddler的基础配置和功能以及使用内置FiddlerScript脚本进行复杂功能调试。</p><h4>准备和配置</h4><p>Fiddler使用C#开发，支持Windows XP以上版本。对于Linux和Mac用户，有一个基于Mono的Alpha版本，经本人Mac实际测试，基本上算是不能用的状态。因此，不建议使用。</p><p>下载地址：<a href="http://www.telerik.com/download/fiddler"><a href="http://www.telerik.com/download/fiddler">http://www.telerik.com/download/fiddler</a></a></p><p>安装完毕后，为了使用后续功能，建议安装<a href="http://www.telerik.com/download/fiddler/fiddlerscript-editor">FiddlerScript Editor</a>插件，否则修改FiddlerScript会比较麻烦。</p><p>准备完毕后，请打开Fiddler进入Tools->Fiddler Options，在Connections中勾选Allow remote computers to connect，并重新启动Fiddler。</p><h4>网络请求抓取</h4><p>完成了上述设置后，Fiddler就已经可以抓取本地的网络请求。如果需要对手机app进行调试，则需要设置手机代理。</p><pre><code>iPhone  进入Settings -&gt; WLAN，单击你连接中的WIFI，在HTTP PROXY下选择Manual，然后Server填写Fiddler所在机器在此WIFI中的IP地址，Port是默认的8888。Android进入设置 -&gt; WIFI，长按你连接中的WIFI，点击修改网络网络，勾选高级选项，在HTTP代理中填写主机名和端口。PC本地  用ProxySwitchy一类的插件，代理到localhost:8888</code></pre><!---![Fiddler Capturing](http://crispgm.github.io/image/fiddler/capturing.png)---><p>选中请求后，可以查看Headers、Cookies和多种模式的(TextView/WebForms等)请求参数。</p><!---![Fiddler Request](http://crispgm.github.io/image/fiddler/request.png)---><p>如果想查看Response，则可以选中请求后点击Inspectors或者直接双击请求查看响应Headers和多种格式的响应内容。对于常见的数据结构，可以格式化展示JSON或XML。</p><!---![Fiddler Response](http://crispgm.github.io/image/fiddler/response.png)---><h4>Web Debugging</h4><p>在进行调试时，我们可以使用Fiddler的几种调试功能：</p><ul><li><p>HOSTS，等同于操作系统的HOSTS文件。</p></li><li><p>Filters，可以修改Request或Response的包体。</p></li><li><p>AutoResponder，可以截获请求，直接将请求代理到指定URL进行响应。</p></li><li>FiddlerScript，以FiddlerScript(JScript.NET)形式，实现Filters和AutoResponder的所有功能，并且可以定制UI界面。</li></ul><h4>HOSTS</h4><p>Fiddler自带有HOSTS功能，跟Windows自带的HOSTS应该是一回事，不过在Fiddler中操作比较方便。</p><p>而是直接从菜单进入Tools -> HOSTS...，勾选Enable remapping of requests(此处省略数十字)，就可以把请求线上服务通过HOST方式，代理到沙盒或者测试机。</p><!---![Fiddler Hosts](http://crispgm.github.io/image/fiddler/hosts.png)---><h4>Filters</h4><p>很多时候，客户端一次行为可能会产生多次HTTP请求，会造成很大的干扰，Filter功能就可以选择性截取</p><p>首先进入Filters标签，勾选Use Filters</p><p>在Request Headers中，勾选Show only if URL contains，并在后面的输入框中填写希望截取的URL。同理，也可以勾选Hide if URL contains，隐藏特定的请求。</p><p>除此之外，还可以直接修改Request或Response包体。</p><!---![Fiddler Filters](http://crispgm.github.io/image/fiddler/filters.png)---><h4>AutoResponder</h4><p>AutoReponder可以截获Request URL，并用其他URL进行Respond。利用AutoResponder，也可以实现将请求引导到指定机器的功能。</p><p>将原URL截获后，甚至可以直接修改URL。截图请求时也可以有很多方式，包括URL正则匹配、包体匹配和Headers匹配等。</p><p>此外，AutoResponder支持设置断点。可以在截获请求后，在断点处修改请求或者响应。</p><!---![Fiddler AutoResponder](http://crispgm.github.io/image/fiddler/autoresponder.png)---><h4>FiddlerScript</h4><p>FiddlerScript就是通过JScript.NET语言(可以约等于JS)，直接修改Request和Response，能够实现上述各种功能。对于熟练的专业用户来说，会更加方便灵活。</p><p>使用FidderScript建议安装第一节所说的插件，安装后就可以直接打开FiddlerScript标签，直接修改代码。</p><p>在OnBeforeRequest函数中修改：</p><blockquote><p>添加Headers</p></blockquote><pre><code>oSession.oRequest["http_net_type"] = "1";</code></pre><blockquote><p>添加Cookies</p></blockquote><pre><code>// 增加预览机标识oSession.oRequest.headers.Add("Cookie", "pub_env=1");</code></pre><blockquote><p>匹配URL，防止添加的字段干扰到其他网页</p></blockquote><pre><code>if (oSession.uriContains("c.tieba.baidu.com")) {      // TODO}</code></pre><p>更多用法，请参考<a href="http://docs.telerik.com/fiddler/knowledgebase/fiddlerscript/modifyrequestorresponse">Fiddler Documentation</a></p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Macbook合盖子或者休眠后没声音]]></title>
<link>http://crispgm.com/page/mac-sound.html</link>
<guid isPermaLink="true">http://crispgm.com/page/mac-sound.html</guid>
<pubDate>Sat, 08 Mar 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>在安装有OSX 10.9 Mavericks的Mac中，包括升级或者直接购买的Mac，在合上盖子或者休眠重开后，经常会遇到没有声音的情况<br />忍了很久后，今天终于找到<a href="http://www.v2ex.com/t/95465">解决方法</a></p><p>解决方法：</p><pre><code>sudo kextunload /System/Library/Extensions/AppleHDA.kext  sudo kextload /System/Library/Extensions/AppleHDA.kext</code></pre><p>OSX 升级到 10.10 Yosemite，此问题没有再出现过，应该是苹果彻底修复了。</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Mac Mail无法退出]]></title>
<link>http://crispgm.com/page/mac-mail.html</link>
<guid isPermaLink="true">http://crispgm.com/page/mac-mail.html</guid>
<pubDate>Fri, 10 Jan 2014 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>Mac Mail在国内网络状况下，和gmail一起总是会有点问题。收件箱里选择删除一封gmail邮件，并用command+q关掉Mail。如果删除gmail失败的话就会报错，之后Mail就会处于一种卡死的状态，退不出来也进不去。只能选择：</p><pre><code>ps aux|grep Mailkill -9 xxxx</code></pre><p>这个事情遇多了，搞了个更简单粗暴的shell脚本</p><pre><code>#!/bin/bashPID=$(ps aux|grep $1|grep -v grep|tail -1|awk '{print $2}')kill -9 $PID</code></pre><p>直到后来，我试了下zsh的自动补全参数功能，输入kill -9之后再输入Mail就会自己智能获取PID，因此这个脚本瞬间没意义了。</p><p>又过了没多久，发现有pgrep这命令，于是没zsh一样轻取。</p><p>最后，我换成了Airmail.</p><p>THE END</p>]]></content:encoded>
</item>
<item>
<title><![CDATA[Shell两个小问题解决方法]]></title>
<link>http://crispgm.com/page/shell-tips.html</link>
<guid isPermaLink="true">http://crispgm.com/page/shell-tips.html</guid>
<pubDate>Mon, 30 Dec 2013 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>最近，在工作种遇到了两个有点棘手的问题。前者是不小心打错命令建立了一个"--"两个减号开头的文件，想删除删不掉；后者是，减少机器后单机文件数过多，导致定时脚本里的tar执行失败了。</p><h4>在shell中删除减号开头的文件</h4><p>解决方法：</p><pre><code>rm -- "--xxxx"</code></pre><h4>argument list too long</h4><p>由于文件数增加，脚本出现错误tar: argument list too long，也就是说tar参数太多了</p><p>解决方法：</p><pre><code>find /path/to/crash_log/20131229 -name '*crash*' -print &gt; /tmp/20131229.list  tar zcf /path/to/client_log/20131229.tar.gz --files-from /tmp/20131229.list  rm /tmp/20131229.list</code></pre>]]></content:encoded>
</item>
<item>
<title><![CDATA[Land of Hope and Glory]]></title>
<link>http://crispgm.com/page/inspiring-songs.html</link>
<guid isPermaLink="true">http://crispgm.com/page/inspiring-songs.html</guid>
<pubDate>Mon, 25 Nov 2013 00:00:00 +0800</pubDate>
<content:encoded><![CDATA[<p>这首歌本来没歌词，名叫《威风堂堂》进行曲(Pomp and Circumstance March No.1 in D major，威风堂堂D大调第一进行曲)，英国著名作曲家埃尔加作曲。后来加上了歌词后，变成了著名爱国歌曲，甚至英格兰橄榄球队的“国歌”就是它。不过一般来说在前面一堆是不会唱的，只有副歌(Chorus)部分才会唱。</p><blockquote><p>Land of hope and glory,<br />Mother of the free.</p><p>How shall we extol thee,<br />who are born of thee.</p><p>Wider still and wider,<br />shall thy bounds be set?</p><p>God who made thee mighty,<br />make thee mightier yet.</p></blockquote><p>本人渣翻译：</p><blockquote><p>希望与光荣之地，<br />自由的母亲。</p><p>我等为你而生，<br />该怎样赞美你？</p><p>疆界在变广，<br />什么时候能被设定。</p><p>让你碉堡的神，<br />使你更加碉堡。</p></blockquote><p>这段歌词的确很霸气，第二段第一句，当然对比起现在英国的国力，这歌词的内容已经名存实亡了很多</p><p>附上视频链接：<a href="http://v.youku.com/v_show/id_XMjA3NDIwMzA0.html">BBC Proms - Land of Hope and Glory</a></p><p>合唱：BBC Singers, BBC Symphony Chorus<br />演奏：BBC Symphony Orchestra<br />指挥：Jiří Bělohlávek  </p>]]></content:encoded>
</item>
</channel>
</rss>
